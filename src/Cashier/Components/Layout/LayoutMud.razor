@using MudBlazor
@inherits LayoutComponentBase
@implements IDisposable
@inject AppState appState

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="@theme" />
<MudDialogProvider CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<MudSwipeArea OnSwipeEnd="@OnSwipeEnd" Style="height: 100vh;">
    <MudLayout>
@*         <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" 
                OnClick="@((e) => DrawerToggle())" />
            Cashier
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        </MudAppBar>
 *@
        <MudDrawer @bind-Open="@appState.DrawerOpen" Width="300px">
            <NavMenuMud />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Medium">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</MudSwipeArea>

@code {
    private MudThemeProvider? _mudThemeProvider;
    MudTheme? theme;
    private bool _isDarkMode;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        appState.OnSidebarToggled += StateHasChanged;

        // set the theme
        theme = Theme.CreateTheme();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
            StateHasChanged();
        }
    }

    public void OnSwipeEnd(SwipeEventArgs args)
    {
        OnSwipe(args.SwipeDirection);
    }

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && !appState.DrawerOpen)
        {
            appState.DrawerOpen = true;
        }
        else if (direction == SwipeDirection.RightToLeft && appState.DrawerOpen)
        {
            appState.DrawerOpen = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        // unsubscribe
        appState.OnSidebarToggled -= StateHasChanged;
    }
}
