@page "/xact-actions"
@* @page "/xact-actions/{xactId}" *@

@using MudBlazor

@inject AppState State
@inject IDexieDAL _db
@inject NavigationManager NavMan
@inject IJSRuntime _js
@inject NotificationService Notification
@inject IDialogService DialogService
@inject RouterService _router

<MudContainer>

    <ToolbarMud>
        Transaction Actions
    </ToolbarMud>

    @if (_xact != null)
    {
        <JournalTransactionRow Xact="@_xact" />
    }

    @* Actions *@
    <MudGrid Justify="Justify.FlexStart" Class="mt-4">
        <MudItem xs="4">
            <SquareButton Icon="@IconsMud.PenSquare"
                          BackgroundColor="@Color.Tertiary" TextColor="var(--mud-palette-secondary)"
                          @onclick="OnEditClick">
                Edit
            </SquareButton>
        </MudItem>

        <MudItem xs="4">
            <SquareButton Icon="@IconsMud.Copy" BackgroundColor="Color.Primary" TextColor=""
                          @onclick="OnDuplicateClicked">
                Duplicate
            </SquareButton>
        </MudItem>

        <MudItem xs="4">
            <SquareButton Icon="@IconsMud.CalendarClock" BackgroundColor="Color.Tertiary" TextColor="var(--mud-palette-secondary)"
            @onclick="OnScheduleClick">
                Schedule
            </SquareButton>
        </MudItem>

        <MudItem xs="4">
            <SquareButton Icon="@IconsMud.Copy" BackgroundColor="Color.Primary"
                          OnClick="OnCopyClick">
                Copy Ledger
            </SquareButton>
        </MudItem>

        <MudItem xs="4">
            <SquareButton Icon="@IconsMud.Trash" BackgroundColor="Color.Secondary" TextColor="var(--mud-palette-tertiary)"
                          @onclick="OnDeleteClick">
                Delete
            </SquareButton>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {
    // [Parameter]
    // public string? xactId { get; set; }

    Xact? _xact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        loadData();
    }

    void loadData()
    {
        _xact = State.Xact;
    }

    async Task OnCopyClick()
    {
        if (_xact is null)
        {
            Notification.Warning("Transaction is empty! Please select a transaction.");
            return;
        }

        // get a journal version
        var text = AppService.TranslateToLedger(_xact);

        // copy to clipboard
        await new AppService().CopyToClipboard(_js, text);

        Notification.Success("Transaction copied to clipboard");
    }

    async Task OnDeleteClick()
    {
        if (_xact is null)
        {
            Notification.Warning("Transaction is empty! Please select a transaction.");
            return;
        }

        // confirm with a dialog
        var result = await AppService.ShowConfirmationDialog(DialogService,
            "Do you want to delete the Transaction?", "Confirm Delete", Color.Secondary);
        if (result.Canceled) return;

        // delete Xact
        await _db.Xacts.Delete(_xact.Id!.Value);

        State.Xact = null;

        Notification.Success("Transaction deleted");

        // go back
        await _router.Back();
    }

    async Task OnDuplicateClicked()
    {
        if (_xact == null)
        {
            Notification.Warning("The current transaction does not exist!");
            return;
        }

        try
        {
            var app = new AppService();

            // create the transaction
            var xact = app.CreateNewXactFrom(_xact);

            // save
            var id = await app.SaveXact(_db, xact);

            // display a notification after or ask before the action.
            Notification.Success("Created a copy of Transaction");

            // load the new tx for editing
            State.Xact = xact;

            // navigate to the editor for the new transaction, resetting the navigation?
            _router.GoTo("/tx", new NavigationOptions { ReplaceHistoryEntry = true });
        }
        catch (Exception ex)
        {
            Notification.Error(ex.Message);
        }
    }

    void OnEditClick()
    {
        NavMan.NavigateTo("/tx");
    }

    void OnScheduleClick()
    {
        Notification.Info("Not implemented");
    }
}
