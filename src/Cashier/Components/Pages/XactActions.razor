@page "/xact-actions"
@* @page "/xact-actions/{xactId}" *@

@using MudBlazor

@inject AppState State
@inject IDexieDAL _db
@inject NavigationManager NavMan
@inject IJSRuntime _js
@inject NotificationService Notification
@inject IDialogService DialogService
@inject RouterService _router

<MudContainer>

    <ToolbarMud>
        Transaction Actions
    </ToolbarMud>

    @if (_xact != null)
    {
        <JournalTransactionRow Xact="@_xact" />
    }

    @* Actions *@
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-10 align-center d-flex flex-column gap-8">
        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Tertiary" FullWidth StartIcon="@IconsMud.PenSquare"
                   Style="color: var(--mud-palette-secondary);" IconSize="Size.Large" @onclick="OnEditClick">
            Edit
        </MudButton>

        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" FullWidth
                   IconSize="Size.Large" @onclick="OnDuplicateClicked">
            Duplicate
        </MudButton>

        <MudButton Color="Color.Tertiary" Size="Size.Large" Variant="Variant.Filled" FullWidth
                   Style="color: var(--mud-palette-secondary);" IconSize="Size.Large">
            Schedule
        </MudButton>

        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" FullWidth
                   StartIcon="@IconsMud.Copy" IconSize="Size.Large" OnClick="OnCopyClick">
            Copy Ledger Entry
        </MudButton>

        <MudButton Color="Color.Secondary" Size="Size.Large" Variant="Variant.Filled" FullWidth
                   Style="color: var(--mud-palette-tertiary);"
                   StartIcon="@IconsMud.Trash" IconSize="Size.Large" @onclick="OnDeleteClick">
            Delete
        </MudButton>
    </MudContainer>

</MudContainer>

@code {
    // [Parameter]
    // public string? xactId { get; set; }

    Xact? _xact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        loadData();
    }

    void loadData()
    {
        _xact = State.Xact;
    }

    async Task OnCopyClick()
    {
        if (_xact is null)
        {
            Notification.Warning("Transaction is empty! Please select a transaction.");
            return;
        }

        // get a journal version
        var text = AppService.TranslateToLedger(_xact);

        // copy to clipboard
        await new AppService().CopyToClipboard(_js, text);

        Notification.Success("Transaction copied to clipboard");
    }

    async Task OnDeleteClick()
    {
        if (_xact is null)
        {
            Notification.Warning("Transaction is empty! Please select a transaction.");
            return;
        }

        // confirm with a dialog
        var result = await AppService.ShowConfirmationDialog(DialogService, 
            "Do you want to delete the Transaction?", "Confirm Delete", Color.Secondary);
        if (result.Canceled) return;

        // delete Xact
        await _db.Xacts.Delete(_xact.Id!.Value);

        State.Xact = null;

        Notification.Success("Transaction deleted");

        // go back
        await _router.Back();
    }

    async Task OnDuplicateClicked()
    {
        if (_xact == null)
        {
            Notification.Warning("The current transaction does not exist!");
            return;
        }

        try {
            var app = new AppService();

            // create the transaction
            var xact = app.CreateNewXactFrom(_xact);

            // save
            var id = await app.SaveXact(_db, xact);

            // display a notification after or ask before the action.
            Notification.Success("Created a copy of Transaction");

            // load the new tx for editing
            State.Xact = xact;

            // navigate to the editor for the new transaction, resetting the navigation?
            _router.GoTo("/tx", new NavigationOptions { ReplaceHistoryEntry = true });
        } catch (Exception ex)
        {
            Notification.Error(ex.Message);
        }
    }

    void OnEditClick()
    {
        NavMan.NavigateTo("/tx");
    }
}
