@page "/cloud-backup"

@using MudBlazor
@inject NavigationManager NavMan
@inject ISettingsService _settings
@inject HttpClient _httpClient
@inject AppState _state

<ToolbarMud>
    <Title>Cloud Backup </Title>
    <ContextMenuItems>
        <MudListItem Icon="@IconsMud.Settings" @onclick="OnSettingsClick">Settings</MudListItem>
        <MudListItem Icon="@IconsMud.DatabaseBackup" @onclick="OnClearCacheClick">Clear Cache</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

<BackupScheduledXactsCard CloudBackupService="_service" @ref="backupCard" />

@code {
    string? _serverUrl;
    CloudBackupService _service = default!;

    BackupScheduledXactsCard backupCard = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // load the server
        _serverUrl = await _settings.GetSetting<string>(SettingsKeys.backupServerUrl) ?? string.Empty;

        _service = new CloudBackupService(_httpClient, _serverUrl);

        // todo: test if server is alive.
        // var svr = new CloudBackupService()
        // send an OPTIONS request?
    }

    async Task OnClearCacheClick()
    {
        _state.CloseMenu();

        _service.ClearCache();

        await backupCard.loadData();
    }

    void OnSettingsClick()
    {
        NavMan.NavigateTo("/cloud-backup-settings");
    }
}
