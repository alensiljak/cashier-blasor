@page "/cloud-backup"

@using MudBlazor
@using System.Text
@using WebDav
@inject ISettingsService Settings
@inject NotificationService Notification
@inject HttpClient httpClient

<ToolbarMud>
    <Title>Cloud Backup</Title>
</ToolbarMud>

<MudPaper Class="mx-2" Style="background-color: var(--mud-palette-background);">
    <MudTextField T="string" Placeholder="i.e. http://localhost:8080" Label="Server URL" Value="@ServerUrl"
                  ValueChanged="(e) => saveServerUrl(e)" FullWidth="false" Class="pa-5" />
</MudPaper>

<MudButton @onclick="TestServer">Test</MudButton>
<MudButton @onclick="OnTestWebDavClick">Test PROPFIND</MudButton>
<MudButton @onclick="TestPropfind">Test PROPFIND direct</MudButton>
<MudButton @onclick="OnSendClick" StartIcon="@IconsMud.FileUp">Send File</MudButton>
<MudButton @onclick="OnDownloadClick" StartIcon="@IconsMud.FileDown">Download File</MudButton>
<MudButton @onclick="OnDownloadRawClick" StartIcon="@IconsMud.FileDown">Download Raw File</MudButton>

<MudTextField Lines="20" @bind-Value="_output" />

@code {
    string? ServerUrl { get; set; }
    string? _output;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadSettings();
    }

    async Task DownloadFile()
    {
        _output = string.Empty;

        var client = new WebDavClient(httpClient);
        var url = GetUrl("/file.txt");
        var response = await client.GetProcessedFile(url);

        var reader = new StreamReader(response.Stream);
        var content = await reader.ReadToEndAsync();

        _output = content;
    }

    async Task loadSettings()
    {
        ServerUrl = await Settings.GetSetting<string>(SettingsKeys.backupServerUrl);
    }

    async Task OnDownloadClick()
    {
        try
        {
            await DownloadFile();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    async Task OnDownloadRawClick()
    {
        try
        {
            _output = string.Empty;

            var client = new WebDavClient(httpClient);
            var uri = GetUrl("/file.txt");
            var response = await client.GetRawFile(uri);

            var reader = new StreamReader(response.Stream);
            var content = await reader.ReadToEndAsync();

            _output = content;
        } catch (Exception ex)
        {
            _output = ex.Message;
        }
    }

    async Task OnSendClick()
    {
        try
        {
            await SendFile();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    async Task OnTestWebDavClick()
    {
        _output = string.Empty;

        try
        {
            await TestWebDavClient();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    async Task saveServerUrl(string value)
    {
        ServerUrl = value;
        await Settings.SetSetting(SettingsKeys.backupServerUrl, ServerUrl);

        Notification.Show("Saved Server URL");
    }

    async Task SendFile()
    {
        _output = string.Empty;

        var client = new WebDavClient(httpClient);
        var uri = GetUrl("/file.txt");
        var fileContents = new MemoryStream(Encoding.UTF8.GetBytes("blah blah blah\nthe end"));
        var response = await client.PutFile(uri, fileContents);

        if (!response.IsSuccessful)
        {
            _output = response.Description;
            return;
        }
        else
        {
            _output = "file sent. Try downloading now.";
        }
    }

    async Task TestWebDavClient()
    {
        var url = GetUrl("/");

        var client = new WebDavClient(httpClient);
        var response = await client.Propfind(url);

        var builder = new StringBuilder();
        foreach (var resource in response.Resources)
        {
            builder.AppendLine(resource.DisplayName);
        }
        _output = builder.ToString();
    }

    async Task TestServer()
    {
        _output = string.Empty;

        var url = GetUrl("/");

        // send a simple OPTIONS request.
        var request = new HttpRequestMessage(HttpMethod.Options, url);
        var response = await httpClient.SendAsync(request);
        var result = await response.Content.ReadAsStringAsync();

        _output = "Options method sent. Success: " + response.IsSuccessStatusCode;
    }

    async Task TestPropfind()
    {
        _output = string.Empty;

        var url = GetUrl("/");

        // send the PROPFIND request.
        var method = new HttpMethod("PROPFIND");
        var request = new HttpRequestMessage(method, url);
        var response = await httpClient.SendAsync(request);
        var result = await response.Content.ReadAsStringAsync();

        _output = result;
    }

    private string GetUrl(string path)
    {
        return string.Format("{0}{1}", ServerUrl, path);
    }
}
