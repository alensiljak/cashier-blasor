@page "/asset-allocation"

@using KristofferStrube.Blazor.FileSystem
@using MudBlazor

@inject IDexieDAL _db
@inject ISettingsService Settings
@inject IStorageManagerService StorageManagerService
@inject NotificationService Notification
@inject NavigationManager NavMan
@inject AppState _state
@inject IJSRuntime _js

<ToolbarMud>
    <Title>Asset Allocation</Title>
    <ContextMenuItems>
        <MudMenuItem Icon="@IconsMud.DatabaseZap" @onclick="OnClearCacheClick">Clear cache</MudMenuItem>
        <MudMenuItem Icon="@IconsMud.FileDown" @onclick="OnExportClick">Export</MudMenuItem>
    </ContextMenuItems>
</ToolbarMud>

<MudContainer Style="max-width: 660px;" Class="pa-0 mb-2">
    <MudSimpleTable Dense Style="background-color: transparent;">
        <thead>
            <tr>
                <th colspan="1"></th>
                <th colspan="4" style="text-align: center; border-right-width: 1px;">Allocation</th>
                <th colspan="3" style="text-align: center;">Value</th>
            </tr>
            <tr>
                <th style="text-align: center;">Asset Class</th>
                <th style="text-align: center;">Target</th>
                <th style="text-align: center;">Current</th>
                @* <th style="text-align: center;">Diff</th> *@
                <th style="text-align: center;">Diff&nbsp;%</th>
                <th style="text-align: center;">Allocated</th>
                <th style="text-align: center;">Current</th>
                <th style="text-align: center;">Difference</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _allocation)
            {
                <tr>
                    <td>
                        <MudLink Class="@(string.Format("pl-{0}", ((item.Depth - 1) * 3)))"
                                 Color="Color.Surface" @onclick="@(() => ShowDetails(item.FullName))">@item.Name</MudLink>
                    </td>
                    <td style="text-align: end;">
                        <MudText>
                            @item.Allocation.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                    <td style="text-align: end;">
                        <MudText>
                            @item.CurrentAllocation.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                    @* <td style="text-align: end;">
                @item.Diff.ToString(Constants.NUMBER_FORMAT)
                </td>*@
                    @* Diff % *@
                    <td style="text-align: end; color: @GetColor(item.DiffPerc);">
                        <MudText>
                            @item.DiffPerc.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                    <td style="text-align: end;">
                        <MudText>
                            @item.AllocatedValue.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                    <td style="text-align: end;">
                        <MudText>
                            @item.CurrentValue.Quantity?.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                    <td style="text-align: end; color: @GetColor(item.DiffPerc);">
                        <MudText>
                            @item.DiffAmount.ToString(Constants.NUMBER_FORMAT)
                        </MudText>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
</MudContainer>

<style>
    .mud-simple-table table * tr td {
        padding: 1px 4px !important;
    }
</style>

<script>
    var saveFile = async (fileName, content) => {
        const arrayBuffer = await content.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);

        var link = document.createElement('a');
        link.download = fileName;
        // link.href = "data:text/plain;charset=utf-8," + encodeURIComponent(content);
        link.href = url;

        link.click();
        link.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {
    List<AssetClass> _allocation = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        // Use cached AA, if available
        if (_state.AssetAllocation != null)
        {
            _allocation = _state.AssetAllocation;
        }
        else
        {
            _allocation = await LoadAaFromFile();

            // Cache the asset allocation for Asset Class details, etc.
            _state.AssetAllocation = _allocation;
        }
    }

    async Task<List<AssetClass>> LoadAaFromFile()
    {
        // load aa
        var opfs = new OpfsService(StorageManagerService);
        var definition = await opfs.ReadFromFile(Constants.AssetAllocationFilename);

        var aa = new AssetAllocationService(Settings, _db, new AccountService());
        try
        {
            await aa.loadFullAssetAllocation(definition);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }

        return aa.Classes;
    }

    /// <summary>
    /// Colors and shades for the text based on the value.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    string GetColor(decimal value)
    {
        switch (value)
        {
            case var n when n <= -20:
                return Colors.Red.Darken4;

            case var n when -20 < n && n < 0:
                return Colors.Red.Lighten3;

            case var n when 0 < n && n < 20:
                return Colors.Green.Lighten3;

            case var n when n > 20:
                return Colors.Green.Darken3;
        }

        return string.Empty;
    }

    async Task OnClearCacheClick()
    {
        _state.CloseMenu();

        _state.AssetAllocation = null;
        _state.AaStocks = null;

        await loadData();

        StateHasChanged();
    }

    /// <summary>
    /// Export Asset Allocation report as plain text.
    /// </summary>
    async Task OnExportClick() {
        var aa = new AssetAllocationService(Settings, _db, new AccountService());
        var output = aa.GetTextReport(_allocation);

        // download as file
        var fileName = GetAaFileName();
        var fileStream = new MemoryStream(new System.Text.UTF8Encoding(true).GetBytes(output));
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await _js.InvokeVoidAsync("saveFile", fileName, streamRef);
    }

    string GetAaFileName()
    {
        var now = DateTime.Now;
        var date = now.Date.ToString(Constants.ISODateFormat);
        var hour = now.Hour.ToString().PadLeft(2, '0');
        var minute = now.Minute.ToString().PadLeft(2, '0');
        var fileName = $"asset-allocation_{date}_{hour}-{minute}.txt";

        return fileName;
    }

    void ShowDetails(string fullName)
    {
        NavMan.NavigateTo("/assetclass-detail/" + fullName);
    }
}
