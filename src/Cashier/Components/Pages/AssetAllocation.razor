@page "/asset-allocation"

@using KristofferStrube.Blazor.FileSystem
@using MudBlazor

@inject IJSRuntime JSRuntime
@inject IStorageManagerService StorageManagerService
@inject NotificationService Notification

<ToolbarMud>
    <Title>Asset Allocation</Title>
</ToolbarMud>

<MudSimpleTable Dense>
    <thead>
        <tr>
            <th colspan="1"></th>
            <th colspan="4" style="text-align: center; border-right-width: 1px;">Allocation</th>
            <th colspan="3" style="text-align: center;">Value</th>
        </tr>
        <tr>
            <th style="text-align: center;">Asset Class</th>
            <th style="text-align: center;">Target</th>
            <th style="text-align: center;">Current</th>
            @* <th style="text-align: center;">Diff</th> *@
            <th style="text-align: center;">Diff %</th>
            <th style="text-align: center;">Allocated</th>
            <th style="text-align: center;">Current</th>
            <th style="text-align: center;">Difference</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var item in allocation)
        {
            <tr>
                <td class=@(string.Format("pl-{0}", (item.Depth * 3)))>
                    @item.Name
                </td>
                <td style="text-align: end;">
                    @item.Allocation.ToString(NUMBER)
                </td>
                <td style="text-align: end;">
                    @item.CurrentAllocation.ToString(NUMBER)
                </td>
@*                 <td style="text-align: end;">
                    @item.Diff.ToString(NUMBER)
                </td>*@
                @* Diff % *@
                <td style="text-align: end; color: @GetColor(item.DiffPerc);">
                    @item.DiffPerc.ToString(NUMBER)
                </td>
                <td style="text-align: end;">
                    @item.AllocatedValue.ToString(NUMBER)
                </td>
                <td style="text-align: end;">
                    @item.CurrentValue.Amount?.ToString(NUMBER)
                </td>
                <td style="text-align: end; color: @GetColor(item.DiffPerc);">
                    @item.DiffAmount.ToString(NUMBER)
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<MudText>File output:</MudText>

<pre>
    @content
</pre>


@code {
    const string NUMBER = "#,##0.00";
    string? content;
    List<AssetClass> allocation = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        // load aa
        var opfs = new OpfsService(StorageManagerService);
        var definition = await opfs.ReadFromFile(Constants.AssetAllocationFilename);
        var settings = SettingsService.CreateInstance(JSRuntime);
        var dal = DexieDAL.CreateInstance(JSRuntime);
        var accountService = new AccountService();

        var aa = new AssetAllocationService(settings, dal, accountService);
        try
        {
            await aa.loadFullAssetAllocation(definition);
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Notification.Error(ex.Message);
        }
        allocation = aa.classes;
        // text output
        content = aa.GetTextReport();
    }

    /// <summary>
    /// Colors and shades for the text based on the value.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    string GetColor(decimal value)
    {
        switch(value)
        {
            case var n when n <= -20:
                return Colors.Red.Darken4;

            case var n when -20 < n && n < 0:
                return Colors.Red.Lighten3;

            case var n when 0 < n && n < 20:
                return Colors.Green.Lighten3;

            case var n when n > 20:
                return Colors.Green.Darken3;
        }

        return string.Empty;
    }
}
