@page "/scheduled-xacts"
@using MudBlazor

@inject NavigationManager NavMan
@inject IDexieDAL _db
@inject AppState _state

<ToolbarMud>
    <Title>Scheduled</Title>
    <ContextMenuItems>
        <MudListItem T="string" Icon="@IconsMud.Package" @onclick="OnBackupClick">Backup</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.PackageOpen" @onclick="OnRestoreClick">Restore</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

@* Search *@
<MudPaper Class="px-2 py-1 d-flex justify-center">
    <div style="width: 500px;">
        <MudTextField AutoFocus="true" T="string" Adornment="Adornment.End" AdornmentIcon="@IconsMud.Search" Label="Search"
                      Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" FullWidth="false"
                      DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch"
                      @bind-Value="searchTerm" />
    </div>
</MudPaper>

@if (_list.Count == 0)
{
    <MudText>No scheduled transactions found</MudText>
}
else
{
    @* Items *@
    <MudList T="string" Clickable>
        @{
            DateOnly? currentDate = null;
        }
        @foreach (var sx in _list)
        {
            var index = _list.IndexOf(sx);

            if (currentDate != sx.NextDate)
            {
                @* add a date separator *@
                currentDate = sx.NextDate;
                <MudDivider />
                <center style="@GetDateStyle(sx)">
                    <MudIcon Icon="@IconsMud.CalendarDays" Size="Size.Small" />
                    @(currentDate?.ToString(Constants.ISODateFormat))
                </center>
            }
            <MudListItem T="string" Class="px-1 py-1" @onclick="@(() => showTx(sx.Id))">
                <MudStack Row AlignItems="AlignItems.Stretch">
                    <MudText Align="Align.Start">@sx.Transaction?.Payee</MudText>
                    <MudSpacer />
                    @if (_amounts.Count > 0)
                    {
                        <span class="text-right" style="color: @(Formatter.GetXactAmountColour(sx.Transaction, _amounts[index])); font-size:smaller;">
                            @_amounts[index]
                        </span>
                    }
                </MudStack>
                <MudItem>
                    <small>@GetFirstLine(sx.Remarks)</small>
                </MudItem>
            </MudListItem>
        }
    </MudList>
}

<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Plus" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

@code {
    List<ScheduledXact> _list = [];
    List<Money> _amounts = [];
    AppService _appService = new AppService();
    string? searchTerm;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();

        // calculate amounts
        CalculateAmounts();
    }

    void CalculateAmounts()
    {
        var xacts = this._list.Select(sx => sx.Transaction);
        var augmenter = new XactAugmenter();
        _amounts = augmenter.calculateXactAmounts(xacts);

        // StateHasChanged();
    }

    async Task loadData()
    {
        // BlazorDexie.Database.Collection<ScheduledXact, long> records;
        var records = _db.ScheduledXacts
            .OrderBy(nameof(ScheduledXact.NextDate));

        // Search by using .filter() query directly on the storage.
        // order by date by default.
        if (searchTerm != null)
        {
            var regex = new ListSearch().GetJsFilterFunction("transaction.payee");
            records = records.Filter(regex, new[] { searchTerm });
        }

        var result = await records
            // .SortByToList("transaction.payee");
            .ToList();

        // sort by payee the records with the same date.
        result.Sort((x, y) =>
        {
            int dateComparison = x.NextDate.CompareTo(y.NextDate);
            if (dateComparison != 0)
            {
                return dateComparison;
            }

            // null check
            if (y.Transaction is null || y.Transaction.Payee is null ||
                x.Transaction is null || x.Transaction.Payee is null) return 0;

            return x.Transaction.Payee.CompareTo(y.Transaction.Payee);
        });

        _list = result;
    }

    string GetDateStyle(ScheduledXact stx)
    {
        return $"color: {GetDateColour(stx.NextDate)};";
    }

    string GetDateColour(DateOnly date)
    {
        return Formatter.GetDateColour(date);
    }

    string GetFirstLine(string? text)
    {
        if (string.IsNullOrWhiteSpace(text)) return string.Empty;

        return text.Split('\n')[0];
    }

    void OnBackupClick()
    {
        NavMan.NavigateTo("/export/scheduled");
    }

    void OnFab()
    {
        // create new transaction in the app state.
        var app = new AppService();

        _state.ScheduledXact = new ScheduledXact();
        _state.Xact = AppService.CreateNewXact();

        NavMan.NavigateTo($"/scheduled-xact-editor");
    }

    void OnRestoreClick()
    {
        NavMan.NavigateTo("/restore/scheduled");
    }

    /// <summary>
    /// Handle debounced search term.
    /// </summary>
    async Task OnSearch()
    {
        await loadData();
        CalculateAmounts();
    }

    async Task showTx(long? sxId)
    {
        if (sxId is null) return;

        var app = new AppService();
        await app.LoadScheduledXact(_db, sxId.Value, _state);

        // router
        NavMan.NavigateTo($"/scheduledxactactions/{sxId}");
    }
}
