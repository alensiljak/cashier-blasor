@page "/scheduled-xact-editor"
@page "/scheduled-xact-editor/{sxid}"
@using MudBlazor

@inject NotificationService Notification
@inject AppState _state
@inject IDexieDAL _db
@inject IJSRuntime _js

<ToolbarMud>
    Scheduled Transaction Edit
</ToolbarMud>

<XactEditor />

<MudDivider DividerType="DividerType.Middle" Class="mt-3 pt-3" />

<ScheduleEditor Class="mt-4" />

<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

@code {
    [Parameter]
    public string? sxid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // if there is an Id, and no record, load the transaction.
        await loadData();
    }

    async Task loadData()
    {
        if (!long.TryParse(sxid, out var sxIdLong)) return;
        if (_state.ScheduledXact != null) return;

        // load stx
        await new AppService().LoadScheduledXact(_db, sxIdLong, _state);
    }

    async Task OnFab()
    {
        await saveData();
    }

    async Task saveData()
    {
        var stx = _state.ScheduledXact;
        if (stx is null)
        {
            Notification.Warning("Scheduled Transaction does not exist!");
            return;
        }
        if (_state.Xact is null)
        {
            throw new Exception("Transaction not found in app state!");
        }

        // Use the current Xact
        stx.Transaction = _state.Xact;

        // use transaction date.
        stx.NextDate = stx.Transaction.Date;

        var result = await new AppService().SaveScheduledXact(_db, stx);

        Notification.Success("Scheduled transaction saved");
        await AppService.NavigateBack(_js);
    }
}
