@page "/tx"

@inject ISnackbar Snackbar
@inject NavigationManager NavMan
@inject AppState State
@inject NotificationService Notification
@inject ISettingsService _settings
@inject IDexieDAL _db
@inject IJSRuntime _jsRuntime
@inject IDialogService DialogService

@using MudBlazor

<ToolbarMud>
    <Title>Journal Entry</Title>
    <ContextMenuItems>
        <MudListItem Icon="@IconsMud.Save" @onclick="OnSaveClicked">Save</MudListItem>
        <MudListItem Icon="@IconsMud.XCircle" @onclick="OnResetClick">Reset</MudListItem>
    </ContextMenuItems>

</ToolbarMud>

@* FAB *@
<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

<XactEditor @ref="_editor" />

@code {
    XactEditor _editor = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (State.Xact == null)
        {
            NavMan.NavigateTo("/");
        }
    }

    async Task OnFab()
    {
        // save
        await OnSaveClicked();
    }

    async Task OnResetClick()
    {
        State.CloseMenu();

        // confirm with a dialog
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.ContentText, "Do you want to clear all the fields?");
        parameters.Add(x => x.ConfirmationButtonColor, Color.Secondary);
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters,
            new DialogOptions { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;
        if (result.Canceled) return;

        //
        var xact = new TransactionActions().CreateNew();
        State.Xact = xact;

        _editor.Refresh();
    }

    async Task OnSaveClicked()
    {
        State.CloseMenu();

        await SaveXact();
    }

    async Task SaveXact()
    {
        var xact = State.Xact;
        if (xact == null)
        {
            Notification.Warning("No transaction found!");
            return;
        }

        // Do we need the id?
        if (xact.Id == null)
        {
            xact.Id = DateTime.UtcNow.Ticks;
        }

        try
        {
            var result = await _db.Xacts.Put(xact);
            Console.WriteLine("after save: {0}", result);

            Notification.Success("Xact saved: " + result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
            return;
        }

        // Should we memorize the last transaction?
        var remember = await _settings.GetSetting<bool>(SettingsKeys.rememberLastTransaction);
        if (remember)
        {
            await new AppService(_db).saveLastTransaction(xact);
        }

        await new RouterService(_jsRuntime).Back();
    }
}
