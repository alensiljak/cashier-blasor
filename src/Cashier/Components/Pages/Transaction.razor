@*
    Transaction (Xact) editor.
    Always uses the Xact from the app state. Make sure that the Xact is loaded before opening the editor.
*@
@page "/tx"
@* @page "/tx/{xactId}" *@

@inject ISnackbar Snackbar
@inject NavigationManager NavMan
@inject AppState State
@inject NotificationService Notification
@inject ISettingsService _settings
@inject IDexieDAL _db
@inject IJSRuntime _js
@inject IDialogService DialogService
@inject RouterService _router

@using MudBlazor

<ToolbarMud>
    <Title>Journal Entry</Title>
    <ContextMenuItems>
        <MudListItem T="string" Icon="@IconsMud.Save" @onclick="OnSaveClicked">Save</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.XCircle" @onclick="OnResetClick">Reset</MudListItem>
    </ContextMenuItems>

</ToolbarMud>

@* FAB *@
<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

<XactEditor @ref="_editor" />

@code {
    XactEditor _editor = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (State.Xact == null)
        {
            NavMan.NavigateTo("/");
        }
    }

    async Task OnFab()
    {
        // save
        await OnSaveClicked();
    }

    async Task OnResetClick()
    {
        State.CloseMenu();

        // confirm with a dialog
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.ContentText, "Do you want to clear all the fields?");
        parameters.Add(x => x.ConfirmationButtonColor, Color.Secondary);
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        //
        State.Xact = AppService.CreateNewXact();

        _editor.Refresh();
    }

    async Task OnSaveClicked()
    {
        State.CloseMenu();

        try
        {
            await SaveXact();
        }
        catch (Exception ex)
        {
            Notification.Error(ex.Message);
        }
    }

    async Task SaveXact()
    {
        var xact = State.Xact;
        if (xact == null)
        {
            Notification.Warning("No transaction found!");
            return;
        }

        var app = new AppService();

        try
        {
            await app.SaveXact(_db, xact);
            Notification.Success("Transaction saved");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
            return;
        }

        // Should we memorize the last transaction?
        var remember = await _settings.GetSetting<bool>(SettingsKeys.rememberLastTransaction);
        if (remember)
        {
            await app.saveLastTransaction(_db, xact);
        }

        await _router.Back();
    }
}
