@page "/tx"

@inject ISnackbar Snackbar
@inject NavigationManager NavMan
@inject AppState State
@inject NotificationService Notification
@inject ISettingsService _settings
@inject IDexieDAL _db
@inject IJSRuntime _jsRuntime

@using MudBlazor

<ToolbarMud>
    <Title>Journal Entry</Title>
    <ContextMenuItems>
        <MudListItem Icon="@IconsMud.Save" @onclick="OnSaveClicked">Save</MudListItem>
        <MudListItem Icon="@IconsMud.XCircle" @onclick="OnResetClick">Reset</MudListItem>
    </ContextMenuItems>

</ToolbarMud>

@* FAB *@
<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

<XactEditor />

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (State.Xact == null)
        {
            NavMan.NavigateTo("/");
        }
    }

    async Task OnFab()
    {
        // save
        await OnSaveClicked();
    }

    void OnResetClick()
    {
        State.CloseMenu();
    }

    async Task OnSaveClicked()
    {
        State.CloseMenu();

        await SaveXact();
    }

    async Task SaveXact()
    {
        var xact = State.Xact;
        if (xact == null)
        {
            Notification.Warning("No transaction found!");
            return;
        }

        // Do we need the id?
        // xact.Id = 0;

        try
        {
            DebugPrinter.PrintJson(xact);

            // var result = await _db.Xacts.Put(xact);
            var result = await _db.Xacts.Add(xact);
            Notification.Success("Xact saved: " + result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
            return;
        }

        // todo: Should we memorize the last transaction?
        var remember = await _settings.GetSetting<bool>(SettingsKeys.rememberLastTransaction);

        await new RouterService(_jsRuntime).Back();
    }
}
