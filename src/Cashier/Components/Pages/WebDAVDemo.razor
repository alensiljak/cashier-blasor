@page "/webdav-demo"

@inject NotificationService Notification
@inject HttpClient httpClient

@using MudBlazor
@using System.Text

<ToolbarMud>
    WebDAV Demo
</ToolbarMud>

<MudText>
    A demo for accessing RClone WebDAV server through HttpClient. The other WebDAV clients don't work!
    Something to do with PROPFIND. Although, PROPFIND works fine from curl.
</MudText>

<MudTextField T="string" Label="Server URL" @bind-Value="serverUrl" />

<MudStack Row="true" AlignItems="AlignItems.Center">
    <MudButton @onclick="OnGetClick">Get</MudButton>
    <MudButton @onclick="OnDirectFileClick">GetFile</MudButton>
    <MudButton @onclick="OnDirectPropfindClick">PropFind</MudButton>
    <MudButton @onclick="OnUploadClick">Upload</MudButton>
</MudStack>

<MudTextField T="string" Lines="15" @bind-Value="_content" />

<MudButton @onclick="OnClearClick">Clear</MudButton>

@code {
    string serverUrl = "http://localhost:8080/";
    string? _content;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //httpClient.DefaultRequestHeaders.re
    }

    void OnClearClick()
    {
        _content = null;
    }

    /// <summary>
    /// Try connecting with the HttpClient directly.
    /// </summary>
    /// <returns></returns>
    async Task OnGetClick()
    {
        // httpClient.BaseAddress = new Uri(serverUrl);
        var url = GetUri("/");
        var response = await httpClient.GetAsync(url);

        // Console.WriteLine(response);

        _content = await response.Content.ReadAsStringAsync();
        // Console.WriteLine(content);
    }

    async Task OnDirectFileClick()
    {
        var url = GetUri("rates.ledger");
        var response = await httpClient.GetAsync(url);

        _content = await response.Content.ReadAsStringAsync();
        // Console.WriteLine(content);
    }

    ///  <summary>
    /// Create a manual PropFind method.
    /// </summary>
    /// <returns></returns>
    async Task OnDirectPropfindClick()
    {
        try
        {
            var method = new HttpMethod("PROPFIND");
            var request = new HttpRequestMessage(method, serverUrl);
            // request.Headers.ReferralPolicy
            var response = await httpClient.SendAsync(request);

            Notification.Info(response.StatusCode.ToString());

            _content = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _content = ex.Message;
        }
    }

    /// <summary>
    /// Upload a dummy file to test.
    /// </summary>
    /// <returns></returns>
    async Task OnUploadClick()
    {
        var url = GetUri("upload-test.txt");
        var stringContent = new StringContent("hello world!");

        try
        {
            // var response = await httpClient.PutAsync(url, stringContent);
            var response = await httpClient.PostAsync(url, stringContent);

            _content = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _content = ex.Message;
        }
    }

    Uri GetUri(string path)
    {
        var url = $"{serverUrl}{path}";
        return new Uri(url);
    }
}
