@* @page "/assetclassdetail" *@
@page "/assetclassdetail/{fullname}"
@using KristofferStrube.Blazor.FileSystem
@using MudBlazor
@using Newtonsoft.Json

@inject ISettingsService _settings
@inject IDexieDAL _db
@inject IStorageManagerService StorageManagerService
@inject HttpClient _httpClient
@inject NotificationService Notification
@inject AppState _state

<ToolbarMud>
    Asset Class Detail
</ToolbarMud>

<div>@fullname</div>
<div>Allocation: @_assetClass?.Allocation</div>

@if (_stocks.Count == 0)
{
    <div class="mt-3">@_message</div>
}
else
{
    <ul class="mt-4 ms-4">
        @foreach (var symbol in _stocks)
        {
            <li class="mt-3">
                <MudText Typo="Typo.h6">
                    • @symbol.Name
                </MudText>

                @*
                Analysis
                Lots
        *@

                @foreach (var account in symbol.Accounts)
                {
                    <div class="ms-3">
                        @account.Name,
                        @account.AccountBalance?.Quantity @account.AccountBalance?.Currency,
                        @account.CurrentValue @account.CurrentCurrency
                    </div>
                }
            </li>
        }
    </ul>
}

@*
@_assetClass

<div>
    @JsonConvert.SerializeObject(_investmentAccounts, Formatting.Indented)
</div>
*@

@code {
    [Parameter]
    public string? fullname { get; set; }

    public string? _message = "Loading...";

    List<AccountViewModel> _investmentAccounts = [];
    AssetClass? _assetClass;
    List<AssetClass> _assetAllocation = [];
    List<StockSymbol> _stocks = [];

    string? _currency;
    string? _serverUrl;

    bool _isOnline = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _serverUrl = await _settings.GetSyncServerUrl();

        await loadData();

        await Task.Run(async () =>
        {
            await RunServerCheck();
            if (_isOnline)
            {
                await securityAnalysis();
            }
        }).ConfigureAwait(false);
    }

    async Task AccAccountBalances()
    {
        // add the balance
        var defaultCurrency = await _settings.GetDefaultCurrency();
        var acctSvc = new AccountService();
        foreach (var account in _investmentAccounts)
        {
            account.AccountBalance = acctSvc.GetAccountBalance(account, defaultCurrency);
        }
    }

    async Task loadData()
    {
        var acctSvc = new AccountService();
        var data = await acctSvc.LoadInvestmentAccounts(_settings, _db);
        _investmentAccounts = data.ConvertAll(acc => new AccountViewModel(acc));

        if (_investmentAccounts.Count == 0)
        {
            Notification.Warning("No investment accounts found");
        }

        await AccAccountBalances();

        await LoadAssetClass();

        _currency = await _settings.GetDefaultCurrency();

        // Update the message, in case there is no data in db.
        if (_stocks.Count == 0)
        {
            _message = "No securities exist";
        }
    }

    async Task LoadAssetClass()
    {
        // LoadAssetClass
        await LoadAssetAllocation();
        _assetClass = _assetAllocation.Find(ac => ac.FullName == fullname) ?? new AssetClass();

        getConstituents();
    }

    async Task LoadAssetAllocation()
    {
        // Load from cache
        if (_state.AssetAllocation != null)
        {
            _assetAllocation = _state.AssetAllocation;
            return;
        }

        var opfs = new OpfsService(StorageManagerService);
        var definition = await opfs.ReadFromFile(Constants.AssetAllocationFilename);

        var accountService = new AccountService();
        var aa = new AssetAllocationService(_settings, _db, accountService);

        await aa.loadFullAssetAllocation(definition);
        _assetAllocation = aa.classes;
    }

    /// <summary>
    /// Load all constituents - stocks, currencies.
    /// </summary>
    void getConstituents()
    {
        var childNames = _assetClass?.Symbols;
        if (childNames is null) return;
        if (childNames.Count == 0) return;

        foreach (var childName in childNames)
        {
            var stock = new StockSymbol
                {
                    Name = childName
                };
            // find all accounts with this commodity
            foreach (var account in _investmentAccounts)
            {
                if (account.AccountBalance?.Currency == childName)
                {
                    stock.Accounts.Add(account);
                }
            }

            _stocks.Add(stock);
        }
    }

    /// <summary>
    /// Load security analysis for all symbols.
    /// </summary>
    /// <returns></returns>
    async Task securityAnalysis()
    {
        if (string.IsNullOrWhiteSpace(_serverUrl))
        {
            throw new Exception("Sync Server URL not set");
        }

        foreach (var symbol in _stocks)
        {
            if (symbol.Analysis != null)
            {
                Console.WriteLine(symbol.Analysis);
            }
        }
    }

    /// <summary>
    /// Check if Cashier Server is online.
    /// </summary>
    /// <returns></returns>
    async Task<bool> RunServerCheck()
    {
        var sync = new SyncService(_httpClient, _serverUrl ?? string.Empty);

        try
        {
            var online = await sync.healthCheck();
            Console.WriteLine("Server is online? {0}", online);
            return true;
        }
        catch (HttpRequestException rex)
        {
            Console.WriteLine(rex.Message);
            return false;
        }

    }
}
