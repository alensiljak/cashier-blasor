@page "/assetclassdetail/{fullname}"
@using KristofferStrube.Blazor.FileSystem
@using MudBlazor
@using Newtonsoft.Json

@inject ISettingsService _settings
@inject IDexieDAL _db
@inject IStorageManagerService StorageManagerService
@inject HttpClient _httpClient
@inject NotificationService Notification
@inject AppState _state

<ToolbarMud>
    Asset Class Detail
</ToolbarMud>

<div>@fullname</div>
<div>Allocation: @_assetClass?.Allocation</div>

@if (_stocks.Count == 0)
{
    <div class="mt-3">@_message</div>
}
else
{
    <ul class="mt-4 ms-4">
        @foreach (var stock in _stocks)
        {
            <li class="mt-3">
                <MudText Typo="Typo.h6">
                    • @stock.Name
                </MudText>


                @* Analysis *@
                @if (stock.Analysis != null)
                {
                    <div class="ms-3">
                        Yield: <span style="@(GetColourStyleForYield(stock.Analysis.Yield))">@stock.Analysis.Yield</span>
                        Gain/Loss: <span style="@(GetColourStyle(stock.Analysis.GainLoss))">@stock.Analysis.GainLoss</span>
                    </div>
                }

                @* Lots *@

                @* accounts *@
                @foreach (var account in stock.Accounts)
                {
                    <div class="ms-3">
                        @account.Name,
                        @account.AccountBalance?.Quantity @account.AccountBalance?.Currency,
                        @account.CurrentValue @account.CurrentCurrency
                    </div>
                }
            </li>
        }
    </ul>
}

@*
@_assetClass

<div>
    @JsonConvert.SerializeObject(_investmentAccounts, Formatting.Indented)
</div>
*@

@code {
    [Parameter]
    public string? fullname { get; set; }

    public string? _message = "Loading...";

    List<AccountViewModel> _investmentAccounts = [];
    AssetClass? _assetClass;
    List<AssetClass> _assetAllocation = [];
    List<StockSymbol> _stocks = [];

    string? _currency;
    string? _serverUrl;

    SyncService _syncService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _serverUrl = await _settings.GetSetting<string>(SettingsKeys.syncServerUrl);
        if (string.IsNullOrWhiteSpace(_serverUrl))
        {
            throw new Exception("Sync Server URL not set!");
        }
        _syncService = new SyncService(_httpClient, _serverUrl ?? string.Empty);

        await loadData();

        await securityAnalysis();
    }

    async Task AccAccountBalances()
    {
        // add the balance
        var defaultCurrency = await _settings.GetDefaultCurrency();
        var acctSvc = new AccountService();
        foreach (var account in _investmentAccounts)
        {
            account.AccountBalance = acctSvc.GetAccountBalance(account, defaultCurrency);
        }
    }

    string GetColourStyleForYield(string? amount)
    {
        if (string.IsNullOrEmpty(amount)) return string.Empty;

        amount = amount.Remove(amount.Length - 1);
        var amt = decimal.Parse(amount);
        var colour = AppService.GetAmountColour(amt);
        return $"color: {colour};";
    }

    string GetColourStyle(string? amount)
    {
        if (string.IsNullOrEmpty(amount)) return string.Empty;

        var parts = amount.Split(' ');
        var amt = decimal.Parse(parts[0]);
        var colour = AppService.GetAmountColour(amt);
        return $"color: {colour};";
    }

    async Task loadData()
    {
        var acctSvc = new AccountService();
        var data = await acctSvc.LoadInvestmentAccounts(_settings, _db);
        _investmentAccounts = data.ConvertAll(acc => new AccountViewModel(acc));

        if (_investmentAccounts.Count == 0)
        {
            Notification.Warning("No investment accounts found");
        }

        await AccAccountBalances();

        await LoadAssetClass();

        _currency = await _settings.GetDefaultCurrency();

        // Update the message, in case there is no data in db.
        if (_stocks.Count == 0)
        {
            _message = "No securities exist";
        }
    }

    async Task LoadAssetClass()
    {
        await LoadAssetAllocation();
        _assetClass = _assetAllocation.Find(ac => ac.FullName == fullname) ?? new AssetClass();

        PopulateStocksWithCaching();
    }

    async Task LoadAssetAllocation()
    {
        // Load from cache
        if (_state.AssetAllocation != null)
        {
            _assetAllocation = _state.AssetAllocation;
            return;
        }

        var opfs = new OpfsService(StorageManagerService);
        var definition = await opfs.ReadFromFile(Constants.AssetAllocationFilename);

        var accountService = new AccountService();
        var aa = new AssetAllocationService(_settings, _db, accountService);

        await aa.loadFullAssetAllocation(definition);
        _assetAllocation = aa.classes;
    }

    void PopulateStocksWithCaching()
    {
        PopulateStocks();

        if (_state.AaStocks == null)
        {
            _state.AaStocks = new Dictionary<string, StockSymbol>();
        }

        // Get cached version, if available.
        for (var i = 0; i < _stocks.Count; i++)
        {
            var stock = _stocks[i];

            if (string.IsNullOrEmpty(stock.Name))
            {
                throw new Exception("Empty stock name!");
            }

            if (_state.AaStocks.TryGetValue(stock.Name, out var stockCached))
            {
                _stocks[i] = stockCached;
            }
            else
            {
                // cache the new stock.
                _state.AaStocks.Add(stock.Name, stock);
            }
        }

        // cache stocks, if not existing
        // foreach (var stock in _stocks)
        // {
        //     if (string.IsNullOrEmpty(stock.Name))
        //     {
        //         throw new Exception("Stock with an empty name encountered!");
        //     }
        //     if(_state.AaStocks.TryGetValue(stock.Name, out var stockCached))
        //     {
        //         _state.AaStocks[stock.Name] = stock;
        //     }
        // }
    }

    /// <summary>
    /// Load all constituents - stocks, currencies.
    /// </summary>
    void PopulateStocks()
    {
        var childNames = _assetClass?.Symbols;
        if (childNames is null) return;
        if (childNames.Count == 0) return;

        foreach (var childName in childNames)
        {
            var stock = new StockSymbol
                {
                    Name = childName
                };
            // find all accounts with this commodity
            foreach (var account in _investmentAccounts)
            {
                if (account.AccountBalance?.Currency == childName)
                {
                    stock.Accounts.Add(account);
                }
            }

            _stocks.Add(stock);
        }
    }

    /// <summary>
    /// Load security analysis for all symbols.
    /// </summary>
    /// <returns></returns>
    async Task securityAnalysis()
    {
        if (string.IsNullOrWhiteSpace(_serverUrl))
        {
            throw new Exception("Sync Server URL not set");
        }
        if (!await RunServerCheck())
        {
            Log.log("Server not online, aborting security analysis");
            return;
        };

        foreach (var stock in _stocks)
        {
            var symbol = stock.Name;
            if (string.IsNullOrEmpty(symbol))
            {
                throw new Exception("symbol is empty!");
            }

            // Update the values
            if (stock.Analysis == null)
            {
                stock.Analysis = await fetchAnalysisFor(symbol);
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// Retrieve the security analysis from CashierSync.
    /// </summary>
    /// <param name="symbol"></param>
    /// <returns></returns>
    async Task<StockAnalysis> fetchAnalysisFor(string symbol)
    {
        var sec = new SecurityAnalyser(_syncService, _settings);

        var result = new StockAnalysis();
        result.Yield = await sec.GetYield(symbol);
        result.GainLoss = await sec.GetGainLoss(symbol);

        return result;
    }

    /// <summary>
    /// Check if Cashier Server is online.
    /// </summary>
    /// <returns></returns>
    async Task<bool> RunServerCheck()
    {
        var sync = new SyncService(_httpClient, _serverUrl ?? string.Empty);

        try
        {
            var online = await sync.healthCheck();
            return online;
        }
        catch (HttpRequestException rex)
        {
            Console.WriteLine(rex.Message);
            return false;
        }

    }
}
