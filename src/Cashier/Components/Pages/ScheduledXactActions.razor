@page "/scheduledxactactions"
@page "/scheduledxactactions/{sxid}"
@using MudBlazor

@inject AppState _state
@inject IDexieDAL _db
@inject NotificationService Notification
@inject IDialogService DialogService
@inject NavigationManager NavMan
@inject IJSRuntime _js

<ToolbarMud>
    Scheduled Transaction Actions
</ToolbarMud>

@if (_state.Xact is null)
{
    <MudText>
        No Scheduled Transaction selected.
    </MudText>
}
else
{
    <JournalTransactionRow Xact="_state.Xact" />

    @* Recurrence details *@
    <MudPaper Class="mt-4 ma-1 pa-2">
    <div >
        @if (Count > 0)
        {
            <span>Repeats every @_state?.ScheduledXact?.Count @_state?.ScheduledXact?.Period</span>
        }
        @if (EndDate.HasValue)
        {
            <p> until @(EndDate.Value.ToString(Constants.ISODateFormat)).</p>
        }
    </div>
    </MudPaper>

    @* Remarks *@
    <MudPaper Class="mt-2 ma-1 pa-2">
        <MudText Typo="Typo.caption">Remarks:</MudText>
        <div class="pt-2">
            @_state?.ScheduledXact?.Remarks
        </div>
    </MudPaper>

    @* Actions *@
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-10 align-center d-flex flex-column gap-8">

        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Tertiary" FullWidth StartIcon="@IconsMud.Scroll"
                   Style="color: var(--mud-palette-secondary);" IconSize="Size.Large" @onclick="OnEnterClick">
            Enter
        </MudButton>

        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth StartIcon="@IconsMud.ChevronsRight"
                   Style="color: var(--mud-palette-tertiary);" IconSize="Size.Large" @onclick="OnSkipClick">
            Skip
        </MudButton>

        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Tertiary" FullWidth StartIcon="@IconsMud.PenSquare"
                   Style="color: var(--mud-palette-secondary);" IconSize="Size.Large" @onclick="OnEditClick">
            Edit
        </MudButton>

        <MudButton Color="Color.Secondary" Size="Size.Large" Variant="Variant.Filled" FullWidth Style="color: var(--mud-palette-tertiary);"
                   StartIcon="@IconsMud.Trash" IconSize="Size.Large" @onclick="OnDeleteClick">
            Delete
        </MudButton>

    </MudContainer>
}

@code {
    [Parameter]
    public string? sxId { get; set; }

    int Count
    {
        get
        {
            if (_state.ScheduledXact is null) return 0;
            if (!int.TryParse(_state.ScheduledXact.Count, out var count)) return 0;

            return count;
        }
    }

    DateOnly? EndDate
    {
        get
        {
            if (_state.ScheduledXact is null) return null;
            if (!_state.ScheduledXact.EndDate.HasValue) return null;

            return _state.ScheduledXact.EndDate;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        if (!long.TryParse(sxId, out var sxid)) return;
        if (_state.ScheduledXact != null) return;

        // load stx
        await new AppService().LoadScheduledXact(_db, sxid, _state);
    }

    /// <summary>
    /// Enter the transaction into Journal and update the next date on schedule.
    /// </summary>
    /// <returns></returns>
    async Task EnterTransaction()
    {
        if (_state.ScheduledXact is null || _state.ScheduledXact.Transaction is null)
        {
            Notification.Warning("Scheduled Transaction does not exist");
            return;
        }

        // Create the journal transaction.
        var app = new AppService();
        var newXact = app.CreateNewXactFrom(_state.ScheduledXact.Transaction);

        // update the iteration date
        await Skip();

        Notification.Success("Transaction created");

        // load transaction into store
        _state.Xact = newXact;

        // open the transaction. Maintain page navigation history.
        NavMan.NavigateTo("/tx", false, true);
    }

    async Task OnDeleteClick()
    {
        var msg = $"Do you want to delete the scheduled transaction {_state.ScheduledXact?.Transaction?.Payee}?";
        var choice = await AppService.ShowConfirmationDialog(DialogService, msg, "Confirm Deletion", Color.Secondary);
        if (choice.Canceled) return;

        var id = _state.ScheduledXact?.Id;
        if (id is null) return;

        await _db.ScheduledXacts.Delete(id.Value);

        Notification.Info("Scheduled transaction deleted");

        await AppService.NavigateBack(_js);
    }

    void OnEditClick()
    {
        NavMan.NavigateTo($"/scheduled-xact-editor/{sxId}");
    }

    async Task OnEnterClick()
    {
        // confirm with a dialog
        var result = await AppService.ShowConfirmationDialog(DialogService,
            "Do you want to enter this transaction into the journal?", "Confirm Creation");
        if (result.Canceled) return;

        // enter
        try
        {
            await EnterTransaction();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    async Task OnSkipClick()
    {
        var dialogResult = await AppService.ShowConfirmationDialog(DialogService, 
            "Do you want to skip the next iteration?", "Confirm skip");
        if (dialogResult.Canceled) return;

        try
        {
            await Skip();

            Notification.Success("Transaction skipped to next iteration");

            await AppService.NavigateBack(_js);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    void validateForSkip(ScheduledXact? stx)
    {
        if (stx is null)
        {
            throw new Exception("No Scheduled Transaction found in app state");
        }

        if(stx.Transaction is null)
        {
            throw new Exception("No Transaction found attached to the schedule.");
        }
    }

    /// <summary>
    /// Saves the Scheduled Transaction record.
    /// </summary>
    /// <returns></returns>
    async Task Save()
    {
        var app = new AppService();
        await app.SaveScheduledXact(_db, _state.ScheduledXact!);
    }

    /// <summary>
    /// Skips the next iteration.
    /// </summary>
    /// <returns></returns>
    async Task Skip()
    {
        var stx = _state.ScheduledXact;
        validateForSkip(stx);

        // Handle the one-off occurrence (no count and no period).

        // Calculate next occurrence date.
        var startDate = stx!.NextDate;
        int? count = string.IsNullOrEmpty(stx.Count) ? null : int.Parse(stx.Count);
        Periods? period = (stx.Period == null) ? null : PeriodNames.ToEnum(stx.Period);
        var endDate = stx.EndDate;

        ValidateSchedule(stx);

        // calculate the next iteration.
        var calc = new IterationCalculator();
        var nextDate = calc.calculateNextIteration(startDate, count, period, endDate);

        if (nextDate is null)
        {
            // Passed the End Date.
            nextDate = DateOnly.MinValue;
        }

        // update the date on the transaction
        stx.Transaction!.Date = nextDate.Value;
        stx.NextDate = nextDate.Value;

        await Save();
    }

    bool ValidateSchedule(ScheduledXact stx)
    {
        // A schedule can't have no repetitions and no end. Skipping the date would result
        // in an invalid situation.
        if ((stx.EndDate is null) && ((stx.Count is null) || (stx.Period is null)))
        {
            throw new Exception("A schedule must have either an end date or a repetition pattern.");
        }

        return true;
    }
}
