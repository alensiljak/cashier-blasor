@page "/forecast"

@inject IDexieDAL _db
@inject NotificationService Notification
@inject ISettingsService _settings

<ToolbarMud>
    Forecast
</ToolbarMud>

<div>
    <p>
        This is an unfinished prototype for the Forecast calculation.
    </p>
    <p>
        The goal is to:
    </p>
    <ul>
        <li>
            take the current value of an account: @AccountName,
            @Account?.AccountBalance?.Quantity @Account?.AccountBalance?.Currency
        </li>
        <li>
            add any local transactions
        </li>
        <li>
            project the scheduled transactions related to the account
        </li>
        <li>
            show a line chart with the balance
        </li>
    </ul>
</div>

@code {
    public string? AccountName { get; set; }

    AccountViewModel? Account { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();

        // todo: Add local transactions
        // todo: project scheduled transactions
        // todo: draw a chart
    }

    async Task<string?> GetAccount()
    {
        var favourites = await _settings.GetFavouriteAccountNames();
        return favourites.FirstOrDefault();
    }

    async Task LoadData()
    {
        // Temporary: Use the first Favourite account
        AccountName = await GetAccount();

        if (string.IsNullOrEmpty(AccountName))
        {
            Notification.Warning("No account selected");
            return;
        }

        // load the account balance.
        var entity = await _db.Accounts.Get(AccountName);
        if (entity == null)
        {
            Notification.Error("Could not find account");
            return;
        }

        var currency = await _settings.GetDefaultCurrency();

        var account = new AccountViewModel(entity);
        account.AccountBalance = new AccountService().GetAccountBalance(account, currency);

        Account = account;
    }
}
