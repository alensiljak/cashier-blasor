@page "/forecast-settings"

@using MudBlazor

@inject NavigationManager NavMan
@inject AppState State
@inject ISettingsService Settings

<ToolbarMud>
    <Title>Financial Forecast Settings</Title>
    <ContextMenuItems>
        <MudMenuItem @onclick="OnAddAccountClick">Add Account</MudMenuItem>
    </ContextMenuItems>
</ToolbarMud>

<MudText>Period</MudText>

<MudRadio T="ushort">Monthly</MudRadio>

<MudText>Accounts</MudText>

@if (_accountNames.Count == 0)
{
    <MudText>No accounts selected for forecasting. Please use the menu to add.</MudText>
}
else
{
    <MudList>
        @foreach (var accountName in _accountNames)
        {
            var index = _accountNames.IndexOf(accountName);

            <MudListItem>
                <MudStack Row Class="align-center">
                    <MudText Class="flex-grow-1">
                        @accountName
                    </MudText>
                    <MudIconButton Icon="@IconsMud.Trash" Class="red" Size="Size.Medium"
                                   OnClick="() => OnDeleteClicked(index)" />
                </MudStack>

            </MudListItem>
        }
    </MudList>
}

<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Plus" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFabClicked" />


@code {
    private List<string> _accountNames = [];
    private string? _account;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();

        await HandleAccountSelection();
    }

    void OnAddAccountClick()
    {
        var selectionMode = new SelectionModeMetadata()
            {

                SelectionType = SelectionType.Account
            };

        State.SelectionModeMetadata = selectionMode;

        NavMan.NavigateTo("/accounts");
    }

    private async Task LoadData()
    {
        // load accounts
        var accounts = await Settings.GetSetting<List<string>>(SettingsKeys.ForecastAccounts);
        if (accounts == null) return;

        _accountNames = accounts;
    }

    private async Task HandleAccountSelection()
    {
        var meta = State.SelectionModeMetadata;
        if (meta == null) return;
        if (meta.SelectionType != SelectionType.Account) return;

        var result = meta.SelectedId;
        if (result == null || result.Length == 0) return;
        // clear selection
        State.SelectionModeMetadata = null;

        _accountNames.Add(result);

        // save
        await SaveSettingsAsync();
    }

    async void OnDeleteClicked(int index)
    {
        // var item = _accountNames[index];
        _accountNames.RemoveAt(index);

        await SaveSettingsAsync();
    }

    void OnFabClicked()
    {
        OnAddAccountClick();
    }

    async Task SaveSettingsAsync()
    {
        await Settings.SetSetting(SettingsKeys.ForecastAccounts, _accountNames);

        // StateHasChanged();
    }
}
