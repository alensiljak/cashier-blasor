@page "/sync"

@inject IJSRuntime _js
@inject IDexieDAL db
@inject ISettingsService settings
@inject NotificationService Notification
@inject HttpClient HttpClient
@inject AppState _state

@using Cashier.Services
@using Cashier.Components.Components
@using MudBlazor

<ToolbarMud>
    <Title>Cashier Sync</Title>
    <ContextMenuItems>
        <MudListItem Icon="@IconsMud.Power" IconSize="Size.Medium" @onclick="OnShutDownClick">
            Shut down server</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

<MudText>To update data from Ledger, the Cashier Server must be running and accessible.</MudText>
<MudText>You can run the Cashier Server locally.</MudText>

<MudPaper Class="mx-md-8 mx-xs-3 px-md-2" Style="background-color: var(--mud-palette-background);">
    <MudTextField T="string" Placeholder="http://localhost:3000" Label="Server URL" Value="@ServerUrl" 
        ValueChanged="saveSyncServerUrl" FullWidth="false" Class="pa-5" />
</MudPaper>

@* Sync *@

<MudList>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" Value="syncAccounts" ValueChanged="syncAccounts_Changed">
                    Sync accounts list with balances
                </MudCheckBox>
            </div>
            @*
            <div class="@(showAccountProgress ? "d-flex" : "d-none") align-center">
                <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
            </div>
            *@
        </MudStack>
    </MudListItem>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" Value="syncAaValues" ValueChanged="syncAaValues_Changed">
                    Sync account balances in base currency, for asset allocation.
                </MudCheckBox>
            </div>
            @*
            <div class="@(showAssetProgress ? "d-flex" : "d-none") align-center">
                <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
            </div>
            *@
        </MudStack>
    </MudListItem>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" Value="syncPayees" ValueChanged="syncPayees_Changed">Sync Payees</MudCheckBox>
            </div>
            @*
            <div class="@(showPayeesProgress ? "d-flex" : "d-none") align-center">
                <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
            </div>
            *@
        </MudStack>
    </MudListItem>
</MudList>

<MudContainer Class="d-flex justify-center mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large"
               StartIcon="@IconsMud.RefreshCW" Style="color: var(--mud-palette-secondary);"
               IconClass="@((showAccountProgress || showAssetProgress || showPayeesProgress) ? "spin" : "")"
               @onclick="onSyncClicked">Sync</MudButton>
</MudContainer>

<SyncComponent></SyncComponent>


@code {
    private string _serverUrl = default!;
    string ServerUrl
    {
        get
        {
            return _serverUrl ?? string.Empty;
        }
        set
        {
            _serverUrl = value;
        }
    }
    string? rootInvestmentAccount = null;
    string? currency = null;

    bool syncAccounts = false;
    bool syncAaValues = false;
    bool syncPayees = false;

    bool showAccountProgress = false;
    bool showPayeesProgress = false;
    bool showAssetProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadSettings();
    }

    async Task loadSettings()
    {
        ServerUrl = await settings.GetSetting<string>(SettingsKeys.syncServerUrl) ?? "http://localhost:3000";
        rootInvestmentAccount = await settings.GetRootInvestmentAccount();
        currency = await settings.GetDefaultCurrency();

        syncAccounts = await settings.GetSyncAccounts();
        syncAaValues = await settings.GetSyncAaValues();
        syncPayees = await settings.GetSyncPayees();

        // StateHasChanged();
    }

    async Task OnShutDownClick()
    {
        Notification.Show("Sending shutdown request");

        try
        {
            var svc = new SyncService(HttpClient, ServerUrl);
            await svc.Shutdown();
        }
        catch (Exception ex)
        {
            Notification.Warning(ex.Message);
        }

        _state.CloseMenu();
    }

    ///  <summary>
    /// Synchronize with Cashier Server.
    /// </summary>
    /// <returns></returns>
    async Task onSyncClicked()
    {
        if (syncAccounts)
        {
            showAccountProgress = true;
            await synchronizeAccounts();
            showAccountProgress = false;
        }
        if (syncAaValues)
        {
            showAssetProgress = true;
            await synchronizeAaValues();

            // Reset cached AA
            _state.ResetAaCache();

            showAssetProgress = false;
        }
        if (syncPayees)
        {
            showPayeesProgress = true;
            await synchronizePayees();
            showPayeesProgress = false;
        }

        // Save the current sync choices
        await saveSettings();
    }

    async Task saveSettings()
    {
        Log.log("saving settings");

        await settings.SetSyncAccounts(syncAccounts);
        await settings.SetSyncAaValues(syncAaValues);
        await settings.SetSyncPayees(syncPayees);
    }

    async Task saveSyncServerUrl(string value)
    {
        // Console.WriteLine("sync server changed: {0}", value);
        ServerUrl = value;

        await settings.SetSetting(SettingsKeys.syncServerUrl, value);

        Notification.Show("Sync URL saved");
    }

    async Task synchronizeAaValues()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        try
        {
            await svc.ReadCurrentValues(_js);
            Notification.Success("Asset Allocation values loaded");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
            return;
        }
    }

    async Task synchronizeAccounts()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        List<string>? accounts = null;
        try
        {
            accounts = await svc.ReadAccounts();
        }
        catch (Exception ex)
        {
            Notification.Warning("Error: " + ex.Message);
        }
        if (accounts == null || accounts.Count == 0)
        {
            Notification.Warning("No accounts received");
            return;
        }

        var appService = new AppService();
        await appService.deleteAccounts(db);

        // Import
        try
        {
            await appService.ImportBalanceSheet(db, accounts);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);

            Notification.Error(ex.Message);
        }

        Notification.Success("Accounts fetched from Ledger");
    }

    async Task synchronizePayees()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        var payeeNames = await svc.ReadPayees();

        if (payeeNames == null || payeeNames.Count == 0)
        {
            Notification.Warning("No Payees retrieved!");
            return;
        }

        // delete all payees only after we have retrieved the new ones.
        await db.Payees.Clear();

        var app = new AppService();
        var result = await app.ImportPayees(db, payeeNames);

        Notification.Success("Imported Payees");
    }

    async Task syncAaValues_Changed()
    {
        // updated the value
        syncAaValues = !syncAaValues;

        // save settings
        await saveSettings();
    }

    async Task syncAccounts_Changed()
    {
        syncAccounts = !syncAccounts;

        await saveSettings();
    }

    async Task syncPayees_Changed()
    {
        syncPayees = !syncPayees;

        await saveSettings();
    }
}
