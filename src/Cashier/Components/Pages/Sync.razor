@page "/sync"

@inject IJSRuntime JSRuntime
@inject NotificationService Notification
@inject HttpClient HttpClient

@using Cashier.Services
@using MudBlazor

<ToolbarMud>
    <Title>Cashier Sync</Title>
    <ContextMenuItems>
        <MudMenuItem Icon="@IconsMud.Power" IconSize="Size.Medium" @onclick="OnShutDownClick">Shut down server</MudMenuItem>
    </ContextMenuItems>
</ToolbarMud>

<MudText>To update data from Ledger, the Cashier Server must be running and accessible.</MudText>
<MudText>You can run Cashier Server locally.</MudText>

<MudText Typo="Typo.h4" Align="Align.Center" Class="my-3">Settings</MudText>

<MudTextField T="string" Placeholder="http://localhost:3000" Label="Server URL" Value="@ServerUrl" ValueChanged="saveSyncServerUrl" />

<MudDivider DividerType="DividerType.Middle" />

<MudText Typo="Typo.h4" Align="Align.Center" Class="my-3">Synchronization</MudText>

<MudList>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" @bind-Checked="syncAccounts">Sync accounts list with balances</MudCheckBox>
            </div>
            @if (showAccountProgress)
            {
                <div class="d-flex align-center">
                    <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
                </div>
            }
        </MudStack>
    </MudListItem>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" @bind-Checked="syncAaValues">
                    Sync account values in base currency
                    (ledger b ^&lt;root&gt; -X &lt;CUR&gt; --flat --no-total). Used for asset allocation.
                </MudCheckBox>
            </div>
            @if (showAssetProgress)
            {
                <div class="d-flex align-center">
                    <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
                </div>
            }
        </MudStack>
    </MudListItem>
    <MudListItem>
        <MudStack Row="true">
            <div class="flex-grow-1">
                <MudCheckBox T="bool" @bind-Checked="syncPayees">Sync Payees</MudCheckBox>
            </div>
            @if (showPayeesProgress)
            {
                <div class="d-flex align-center">
                    <MudIcon Icon="@IconsMud.RefreshCW" Size="Size.Small" Color="Color.Tertiary" Class="spin" />
                </div>
            }
        </MudStack>
    </MudListItem>
</MudList>

<MudContainer Class="d-flex justify-center mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large"
               StartIcon="@IconsMud.RefreshCW" Style="color: var(--mud-palette-secondary);" Class=""
               @onclick="onSyncClicked">Sync</MudButton>
</MudContainer>

@code {
    private string _serverUrl = default!;
    string ServerUrl
    {
        get
        {
            return _serverUrl ?? "http://localhost:3000";
        }
        set
        {
            _serverUrl = value;
        }
    }
    string? rootInvestmentAccount = null;
    string? currency = null;

    bool syncAccounts = false;
    bool syncAaValues = false;
    bool syncPayees = false;

    bool showAccountProgress = false;
    bool showPayeesProgress = false;
    bool showAssetProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadSettings();
    }

    async Task loadSettings()
    {
        var settings = SettingsService.CreateInstance(JSRuntime);

        ServerUrl = await settings.GetSyncServerUrl();
        rootInvestmentAccount = await settings.GetRootInvestmentAccount();
        currency = await settings.GetDefaultCurrency();

        syncAccounts = await settings.GetSyncAccounts();
        syncAaValues = await settings.GetSyncAaValues();
        syncPayees = await settings.GetSyncPayees();

        // StateHasChanged();
    }

    async Task OnShutDownClick()
    {
        Notification.Show("Sending shutdown request");

        var svc = new SyncService(HttpClient, ServerUrl);
        await svc.Shutdown();
    }

    ///  <summary>
    /// Synchronize with Cashier Server.
    /// </summary>
    /// <returns></returns>
    async Task onSyncClicked()
    {
        if (syncAccounts)
        {
            showAccountProgress = true;
            await synchronizeAccounts();
            showAccountProgress = false;
        }
        if (syncAaValues)
        {
            showAssetProgress = true;
            await synchronizeAaValues();
            showAssetProgress = false;
        }
        if (syncPayees)
        {
            showPayeesProgress = true;
            await synchronizePayees();
            showPayeesProgress = false;
        }

        // Save the current sync choices
        var settings = SettingsService.CreateInstance(JSRuntime);
        await settings.SetSyncAccounts(syncAccounts);
        await settings.SetSyncAaValues(syncAaValues);
        await settings.SetSyncPayees(syncPayees);
    }

    async Task saveSyncServerUrl(string value)
    {
        // Console.WriteLine("sync server changed: {0}", value);
        ServerUrl = value;

        var settings = SettingsService.CreateInstance(JSRuntime);
        await settings.SetSyncServerUrl(value);

        Notification.Show("Sync URL saved");
    }

    async Task synchronizeAaValues()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        try
        {
            await svc.ReadCurrentValues(JSRuntime);
            Notification.Success("Asset Allocation values loaded");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Notification.Error(ex.Message);
            return;
        }
    }

    async Task synchronizeAccounts()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        string[]? accounts = null;
        try
        {
            accounts = await svc.ReadAccounts();
        }
        catch (Exception ex)
        {
            Notification.Warning("Error: " + ex.Message);
        }
        if (accounts == null || accounts.Length == 0)
        {
            Notification.Warning("No accounts received");
            return;
        }

        var appService = AppService.CreateInstance(JSRuntime);
        await appService.deleteAccounts();

        // Import
        try
        {
            await appService.ImportBalanceSheet(accounts);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);

            Notification.Error(ex.Message);
        }

        Notification.Success("Accounts fetched from Ledger");
    }

    async Task synchronizePayees()
    {
        var svc = new SyncService(HttpClient, ServerUrl);
        var payeeNames = await svc.ReadPayees();

        if (payeeNames == null || payeeNames.Length == 0)
        {
            Notification.Warning("No Payees retrieved!");
            return;
        }

        // delete all payees only after we have retrieved the new ones.
        var db = DexieDAL.CreateInstance(JSRuntime);
        await db.Payees.Clear();

        var app = new AppService(JSRuntime, db);
        var result = await app.ImportPayees(payeeNames);

        Notification.Success("Imported Payees");
    }
}
