@page "/account-xacts/{accountName}"

@using Cashier.Data.Entities
@using MudBlazor

@inject IDexieDAL _db
@inject NotificationService Notification

<ToolbarMud>
    Account Transactions
</ToolbarMud>

<span>@Account.ParentAccountName</span>
<h1>@Account.AccountName</h1>

<MudList>
    @foreach (var xact in Xacts)
    {
        <MudListItem>
            <MudStack Row>
                <MudItem>
                    @xact.Payee
                </MudItem>
                <MudSpacer />
                <MudItem>
                    @xact?.Postings?.FirstOrDefault()?.Amount
                    @xact?.Postings?.FirstOrDefault()?.Currency
                </MudItem>
            </MudStack>
        </MudListItem>
    }
</MudList>

@code {
    [Parameter]
    public string? accountName { get; set; }

    AccountViewModel Account { get; set; }
    List<Xact> Xacts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (accountName == null)
        {
            // throw new ArgumentNullException(accountName);
            Notification.Error("Account not set!");
            return;
        }

        Account = new AccountViewModel(new Account());
        Xacts = new List<Xact>();

        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            Notification.Error(ex.Message);
        }
    }

    async Task CreateInitialBalanceXact()
    {
        await LoadAccount();

        // create the initial transaction

        var xact = new Xact(DateOnly.Parse("1900-01-01"), "Initial Balance", null,
        new List<Posting>()
            {
            new Posting(accountName, Account.AccountBalance)
            });
        Xacts.Add(xact);
    }

    async Task LoadAccount()
    {
        // get the account balance.
        var svc = new AccountService();
        var account = await svc.LoadAccount(_db, accountName ?? "");
        if (account == null)
        {
            throw new Exception("Account not found!");
        }

        Account = new AccountViewModel(account);

        var balance = svc.GetAccountBalance(account);
        Account.AccountBalance = balance;
    }

    /// <summary>
    /// Loads transactions for the account.
    /// </summary>
    /// <returns></returns>
    async Task LoadData()
    {
        // get the initial balance
        await CreateInitialBalanceXact();

        // get all the transactions that have a posting for this account.

        // fill the transactions.

        // sum the amount for the account

        // apply to the initial balance

    }
}
