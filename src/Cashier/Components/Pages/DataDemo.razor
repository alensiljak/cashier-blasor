@page "/data-demo"

@using Cashier.Data
@using Cashier.Domain
@using IndexedDB.Blazor

@inject IJSRuntime jsRuntime
@inject IIndexedDbFactory DbFactory

<FluentDesignSystemProvider FillColor=@Palette.Info>

    <FluentHeader class="glossy">
        <h3>Data Demo</h3>
    </FluentHeader>

</FluentDesignSystemProvider>

<article class="content">
    <p>This is a demo page for manipulating the IndexedDb data store.</p>

    <FluentButton @onclick="createRecords">Create records</FluentButton>

    <p>Listing all the Accounts: (total: @totalRecords) </p>

    <ul>
        @foreach (var account in accounts)
        {
            <li>@account.Name</li>
        }
    </ul>

</article>

@code {
    private int totalRecords { get; set; }
    private List<Cashier.Domain.Account> accounts { get; set; } = new List<Cashier.Domain.Account>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await runIdbDemo();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task runIdbDemo()
    {
        // Console.WriteLine("===> demo start");

        using var db = await DbFactory.Create<CashierDb>();

        // retrieve the data
        // Console.WriteLine("records: {0}", db.Accounts.Count);
        this.totalRecords = db.Accounts.Count;

        this.accounts = db.Accounts.ToList();

        // var accounts = db.Accounts.Take(10); // db.Accounts.ToArray();
        // foreach (var account in db.Accounts)
        // {
        //     Console.WriteLine(account.Name);
        // }

        // Console.WriteLine("==> demo end");
    }

    private async Task createRecords() {
        using var db = await DbFactory.Create<CashierDb>();
        db.Accounts.Add(new Cashier.Domain.Account { Name = "Assets" });
        db.Accounts.Add(new Cashier.Domain.Account { Name = "Expenses" });

        try
        {
            await db.SaveChanges();
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        }
    }
}
