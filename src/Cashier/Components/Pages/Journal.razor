@page "/journal"
@using MudBlazor

@inject IDexieDAL _db
@inject NavigationManager NavMan
@inject AppState State
@inject IDialogService DialogService
@inject NotificationService Notification

<ToolbarMud>
    <Title>
        Journal
    </Title>
    <ContextMenuItems>
        <MudListItem T="string" Icon="@IconsMud.FileDown" @onclick="OnExportClick">Export</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.Trash" OnClick="onDeleteAllClicked">Delete All</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

@if (_xacts.Count == 0)
{
    <MudText Align="Align.Center">The device journal is empty</MudText>
}
else
{
    <MudList T="string">
        @foreach (var xact in _xacts)
        {
            <MudListItem T="string" Class="px-1">
                <JournalTransactionRow Xact="@xact" OnItemClicked="@OnItemClicked" />
            </MudListItem>
        }
    </MudList>
}

<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Plus" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />

@code {
    List<Xact> _xacts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    private async Task loadData()
    {
        _xacts = await _db.Xacts
            .OrderBy(nameof(Xact.Date))
            .ToList();
    }

    async Task onDeleteAllClicked()
    {
        State.CloseMenu();

        // confirm with a dialog
        var result = await AppService.ShowConfirmationDialog(DialogService,
            "Do you want to delete all the Transactions?", "Confirm Delete", Color.Secondary);
        if (result.Canceled) return;

        // delete all transactions
        await _db.Xacts.Clear();

        Notification.Success("All local transactions deleted.");

        await loadData();
    }

    void OnExportClick()
    {
        State.CloseMenu();

        NavMan.NavigateTo("/export/journal");
    }

    void OnFab()
    {
        // create new transaction in the app store
        State.Xact = new AppService().CreateNewXact();

        NavMan.NavigateTo("/tx");
    }

    void OnItemClicked(Xact xact)
    {
        // Here we set the selected Transaction as the current transaction.
        State.Xact = xact;

        NavMan.NavigateTo("/xact-actions");
    }
}
