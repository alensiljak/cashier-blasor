@page "/favourites-reorder"
@using MudBlazor
@using System.Collections.ObjectModel

@inject ISettingsService _settings
@inject IJSRuntime _js

<ToolbarMud>
    Reorder Favourites
</ToolbarMud>

@if (_accounts == null)
{
    <div>Loading...</div>
}
else
{

    <MudDropContainer T="string" Items="@_accounts" @ref="_container" Class="d-flex flex-wrap flex-grow-1"
                      ItemsSelector="@((item,dropzone) => true)"
                      ItemDropped="ItemUpdated" >
        <ChildContent>
            <MudList draggable="true">
                <MudDropZone T="string" Identifier="dropzone" Class="flex-grow-1" AllowReorder="true" />
            </MudList>
        </ChildContent>
        <ItemRenderer>
            <MudListItem Icon="@IconsMud.Menu" Text="@context" />
        </ItemRenderer>
    </MudDropContainer>
}
<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFabClicked" />

@code {
    ObservableCollection<string>? _accounts;
    private MudDropContainer<string> _container = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();
    }

    private void ItemUpdated(MudItemDropInfo<string> dropItem)
    {
        if (_accounts == null) return;

        var account = dropItem.Item;
        if (account == null) return;

        var index = _accounts.IndexOf(account);
        var newIndex = dropItem.IndexInZone;

        // Console.WriteLine($"item {account}, index {index}, updated: {dropItem}");

        _accounts.Move(index, newIndex);
    }

    async Task LoadData()
    {
        var list = await _settings.GetFavouriteAccountNames();
        _accounts = new ObservableCollection<string>(list);

        StateHasChanged();
        _container.Refresh();
    }

    async Task OnFabClicked()
    {
        // save the order
        await _settings.SetSetting(SettingsKeys.favouriteAccounts, _accounts);

        await AppService.NavigateBack(_js);
    }
}
