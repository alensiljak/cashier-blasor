@page "/favourites"

@using MudBlazor

@inject IDexieDAL _db
@inject NotificationService Notification
@inject AppState State
@inject NavigationManager NavMan
@inject ISettingsService _settings

<ToolbarMud>
    <Title>Favourites</Title>
    <ContextMenuItems>
        <MudListItem T="string" Icon="@IconsMud.PlusCircle" OnClick="PromptForAccount">Add</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.Trash" OnClick="OnDeleteClick">Delete</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.Trash">Delete All</MudListItem>
        <MudListItem T="string" Icon="@IconsMud.ArrowUpDown" OnClick="OnReorderClick">Reorder</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

@* Accounts List *@
@if (accounts.Count == 0)
{
    <MudText>No favourite accounts set</MudText>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="px-0">

        @*
    <MudSimpleTable Dense Style="background-color: transparent;">
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td class="pl-2 pr-1">
                        @account.Name
                    </td>
                </tr>
                <tr>
                    <td class="pl-0 pr-2" style="text-align: end;">
                        @account.AccountBalance
                    </td>

                </tr>
            }
        </tbody>
    </MudSimpleTable>
    *@

        <MudList T="string" Clickable Class="py-0 mb-2" Dense>
            @foreach (var account in accounts)
            {
                <MudListItem T="string" Class="px-1 py-0 my-0" Style="border-bottom: solid 1px;" 
                    @onclick="@((e) => OnAccountClicked(account.Name))">
                    <MudText Typo="Typo.caption" Style="color: var(--mud-palette-dark-text);">
                        @account.ParentAccountName
                    </MudText>
                    <div class="d-flex row">
                        <MudText>
                            @account.AccountName
                        </MudText>
                        <MudSpacer />
                        <MudText Align="Align.End" Typo="Typo.body2" Style="@(GetColour(account.AccountBalance?.Quantity))"
                                 Class="align-self-end">
                            @account.AccountBalance
                        </MudText>
                    </div>
                </MudListItem>
            }
        </MudList>

    </MudContainer>
}

<MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Plus" Class="z-100"
        Style="@Constants.DefaultFabPosition" @onclick="OnFab" />


@code {
    List<AccountViewModel> accounts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // handle account selection after Add new account.
        await HandleAccountSelection();

        try
        {
            await loadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    async Task AddAccount(string accountName)
    {
        var favourites = await _settings.GetFavouriteAccountNames();

        // Add only if not already present.
        if (favourites.Contains(accountName))
        {
            Notification.Warning("The account is already present");
            return;
        }

        favourites.Add(accountName);

        await _settings.SetSetting(SettingsKeys.favouriteAccounts, favourites);
    }

    string GetColour(decimal? amount)
    {
        if (amount is null) return string.Empty;

        return $"color: {Formatter.GetAmountColour(amount.Value)};";
    }

    async Task loadData()
    {
        var app = new AppService();
        var data = await app.LoadFavouriteAccounts(_db);
        accounts = data.ConvertAll(acc => new AccountViewModel(acc));

        var aug = new XactAugmenter();
        await aug.AddLocalXactsToBalance(_db, accounts);
    }

    void OnAccountClicked(string? accountName)
    {
        if (accountName == null) return;

        // open account transactions
        NavMan.NavigateTo("/account-xacts/" + accountName);
    }

    void OnDeleteClick()
    {
        NavMan.NavigateTo("/favourites-delete");
    }

    void OnFab()
    {
        PromptForAccount();
    }

    void OnReorderClick()
    {
        NavMan.NavigateTo("/favourites-reorder");
    }

    void PromptForAccount()
    {
        // show the account picker
        var selectionMode = new SelectionModeMetadata()
            {
                SelectionType = SelectionType.Account
            };

        State.SelectionModeMetadata = selectionMode;

        NavMan.NavigateTo("/accounts");
    }

    /// <summary>
    /// Handle selecting accounts. We return to this page after the account is selected.
    /// </summary>
    /// <returns></returns>
    async Task HandleAccountSelection()
    {
        var meta = State.SelectionModeMetadata;

        // validations
        if (meta == null) return;
        if (meta.SelectedId == null) return;
        if (meta.SelectionType != SelectionType.Account) return;

        var account = await _db.Accounts.Get(meta.SelectedId);
        if(account == null)
        {
            throw new Exception("Account not found!");
        }

        await AddAccount(account.Name!);

        // cleanup
        State.SelectionModeMetadata = null;
    }
}
