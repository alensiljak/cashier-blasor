@page "/settings"

@using BlazorDexie.JsModule
@using KristofferStrube.Blazor.FileSystem
@using MudBlazor
@using Cashier.Services
@using System.Text.Json

@inject IJSRuntime _js
@inject ISettingsService settings
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavMan
@inject IStorageManagerService StorageManagerService
@inject NotificationService Notification
@inject AppState _state

<ToolbarMud>
    <Title>Settings</Title>
    <ContextMenuItems>
        <MudListItem @onclick="@onAppStateMenu">App State</MudListItem>
    </ContextMenuItems>
</ToolbarMud>

<MudForm>
    <MudTextField T="string" Label="Main Currency" @bind-Value="mainCurrency" />

    <MudText Typo="Typo.h5" Class="mt-4">Investments</MudText>
    <MudTextField T="string" @bind-Value="investmentRoot"
                  Label="Root investment account" />

    <MudText Typo="Typo.h5" Class="mt-4">Last Transaction</MudText>
    <MudCheckBox T="bool?" @bind-Checked="rememberLastTransaction"
                 Label="Remember last transaction for payees. Reuses the information for new transactions." />

    <MudCheckBox T="bool" Label="Use Dark Mode" />

    <MudContainer Style="text-align: center;" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="saveSettings">Save</MudButton>
    </MudContainer>

    <MudDivider Class="my-6" />

    @* Restore Settings *@
    <MudText Typo="Typo.h5" Class="mt-4">Restore Settings</MudText>
    <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="RestoreSettings">
        <ButtonTemplate>
            <div style="text-align: center;">
                <MudIconButton Icon="@IconsMud.FileUp" Color="Color.Success" HtmlTag="label" for="@context" />
            </div>
        </ButtonTemplate>
        <SelectedTemplate>
            @if (context != null)
            {
                <MudText>@context.Name</MudText>
            }
            else
            {
                <MudText Align="Align.Center">select file to restore</MudText>
            }
        </SelectedTemplate>
    </MudFileUpload>

    @* Asset Allocation *@
    <MudText Typo="Typo.h5" Class="mt-4">Asset Allocation</MudText>
    <MudFileUpload T="IBrowserFile" Accept=".toml" FilesChanged="OnAaFileSelected">
        <ButtonTemplate>
            <div style="text-align: center;">
                <MudIconButton Icon="@IconsMud.FileUp" Color="Color.Success" HtmlTag="label" for="@context" />
            </div>
        </ButtonTemplate>
        <SelectedTemplate>
            @if (context != null)
            {
                <MudText>@context.Name</MudText>
            }
            else
            {
                <MudText Align="Align.Center">select file</MudText>
            }
        </SelectedTemplate>
    </MudFileUpload>

    @* Reload App *@
    <MudText Typo="Typo.h5" Class="mt-4">Reload App</MudText>
    <MudText>
        Force-reload the page to refresh the version in case the background service worker does not manage to update to the latest
        version.
    </MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="reloadApp">Reload App</MudButton>
</MudForm>

@code {
    string? mainCurrency;
    string? investmentRoot;
    bool? rememberLastTransaction;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadSettings();
    }

    async Task loadSettings()
    {
        // currency
        mainCurrency = await settings.GetSetting<string>(SettingsKeys.currency);

        // root investment account
        investmentRoot = await settings.GetRootInvestmentAccount();

        // remember last transaction
        rememberLastTransaction = await settings.GetRememberLastTransaction();
    }

    async Task OnAaFileSelected(IBrowserFile aaFile)
    {
        // confirm with a dialog
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.ContentText, "Do you want to import the selected Asset Allocation file?");
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Import", parameters);
        var result = await dialog.Result;
        if (result.Canceled) return;

        // restore settings
        await RestoreAssetAllocation(aaFile);
    }

    void onAppStateMenu()
    {
        NavMan.NavigateTo("/appstate-viewer");
    }

    async Task reloadApp()
    {
        await _js.InvokeVoidAsync("window.location.reload", true);
    }

    /// <summary>
    /// Load Asset Allocation from a file.
    /// </summary>
    /// <param name="aaFile"></param>
    /// <returns></returns>
    async Task RestoreAssetAllocation(IBrowserFile aaFile)
    {
        var stream = aaFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();
        // Console.WriteLine("file content: {0}", content);

        // Save to OPFS.
        var opfs = new OpfsService(StorageManagerService);
        await opfs.SaveToFile(Constants.AssetAllocationFilename, content);

        // Reset cached AA
        _state.ResetAaCache();

        Snackbar.Add("Asset Allocation imported.");
    }

    /// <summary>
    /// Restore Settings from a backup JSON file.
    /// </summary>
    /// <param name="file">A backup file in JSON format.</param>
    /// <returns></returns>
    async Task RestoreSettings(IBrowserFile file)
    {
        // confirm with a dialog
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.ContentText, "Do you want to restore the selected settings file?");
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Restore", parameters,
            new DialogOptions { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;
        if (result.Canceled) return;

        // restore settings

        var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        // Deserialize JSON

        List<Setting>? settingList;
        try
        {
            settingList = JsonSerializer.Deserialize<List<Setting>>(content,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deserializing the backup file.", Severity.Error);
            Console.WriteLine("Error deserializing the Settings backup file:\n{0}", ex.Message);
            return;
        }
        if (settingList == null)
        {
            Snackbar.Add("No settings found in the file.", Severity.Warning);
            return;
        }

        // clear the existing settings?

        // Insert into db.

        var insertResult = await settings.BulkPut(settingList);
        Snackbar.Add("Settings restored", Severity.Success);

        await loadSettings();
    }

    async Task saveSettings()
    {
        var result = await settings.SetDefaultCurrency(mainCurrency ?? "");
        Console.WriteLine("saving currency: {0}", result);

        if (result != string.Empty)
        {
            Notification.Success("Currency saved");
        }
        else
        {
            Notification.Error("Could not save the currency.");
        }

        // root investment account
        if (investmentRoot != null)
        {
            result = await settings.SetRootInvestmentAccount(investmentRoot);
            Notification.Success("Saved investment root account");
        }

    }
}
