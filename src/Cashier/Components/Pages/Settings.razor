@page "/settings"
@inherits DexieNET<CashierDB>
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using MudBlazor
@using DexieNET
@using DexieNET.Component
@using Cashier.Lib
@using Cashier.Services
@using System.Text.Json

<ToolbarMud>
    <Title>Settings</Title>
</ToolbarMud>

<MudForm>
    <MudTextField T="string" Label="Main Currency" @bind-Value="mainCurrency" />

    <MudText Typo="Typo.h5" Class="mt-4">Investments</MudText>
    <MudTextField T="string" Label="Root investment account" />

    <MudText Typo="Typo.h5" Class="mt-4">Last Transaction</MudText>
    <MudCheckBox T="bool" Label="Remember last transaction for payees. Reuses the information for new transactions." />

    <MudCheckBox T="bool" Label="Use Dark Mode" />

    <MudContainer Style="text-align: center;" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="saveSettings">Save</MudButton>
    </MudContainer>

    <MudDivider Class="my-6" />

    <MudText Typo="Typo.h5" Class="mt-4">Asset Allocation</MudText>
    <MudTextField T="string" Label="Asset Allocation settings file" />
    <MudFileUpload T="IBrowserFile" Accept=".toml">
        <ButtonTemplate>
            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" for="">
                Select File
            </MudButton>
        </ButtonTemplate>
        <SelectedTemplate>
            selected template
        </SelectedTemplate>
    </MudFileUpload>

    <MudText Typo="Typo.h5" Class="mt-4">Restore Settings</MudText>
    <MudStack Row="true">
        <MudText>Tap the file icon to select the file to restore:</MudText>
        <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="RestoreSettings">
            <ButtonTemplate>
                <MudIconButton Icon="@IconsMud24.FileUp" Color="Color.Success" HtmlTag="label" for="@context"></MudIconButton>
            </ButtonTemplate>
            <SelectedTemplate>
                @if (context != null)
                {
                    <MudText>@context.Name</MudText>
                }
                else
                {
                    <MudText>No file selected</MudText>
                }
            </SelectedTemplate>
        </MudFileUpload>
    </MudStack>

    <MudText Typo="Typo.h5" Class="mt-4">Reload App</MudText>
    <MudText>
        Force-reload the page to refresh the version in case the background service worker does not manage to update to the latest
        version.
    </MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="reloadApp">Reload App</MudButton>
</MudForm>

@code {
    string? mainCurrency { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadSettings();
    }

    async Task loadSettings()
    {
        await Dexie.Version(1).Stores();

        var svc = new SettingsService(Dexie);
        // currency
        mainCurrency = await svc.Get(SettingsKeys.currency);

        // root investment account
        // remember last transaction

    }

    async Task reloadApp()
    {
        await jsRuntime.InvokeVoidAsync("window.location.reload", true);
        // window.location.reload(true)
    }

    /// <summary>
    /// Restore Settings from a backup JSON file.
    /// </summary>
    /// <param name="file">A backup file in JSON format.</param>
    /// <returns></returns>
    async Task RestoreSettings(IBrowserFile file)
    {
        // Console.WriteLine("selected file: " + file.Name);

        // confirm with a dialog
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.ContentText, "Do you want to restore the selected settings file?");

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Restore", parameters,
            new DialogOptions { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // restore settings
            var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            // Console.WriteLine("Content: {0}", content);

            // Deserialize JSON

            List<Setting>? settings;
            try
            {
                settings = JsonSerializer.Deserialize<List<Setting>>(content,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error deserializing the backup file.", Severity.Error);
                Console.WriteLine("Error deserializing the Settings backup file:\n{0}", ex.Message);
                return;
            }
            // Console.WriteLine("restore settings here: {0}", settings);
            if (settings == null)
            {
                Snackbar.Add("No settings found in the file.", Severity.Warning);
                return;
            }

            // Insert into db.

            var svc = new SettingsService(Dexie);
            var insertResult = await svc.BulkInsert(settings);
            // Console.WriteLine("insert result: {0}", insertResult);
            Snackbar.Add("Settings restored", Severity.Success);
        }
    }

    async Task saveSettings()
    {
        var svc = new SettingsService(Dexie);

        if (await svc.Set(SettingsKeys.currency, mainCurrency ?? ""))
        {
            Snackbar.Add("Currency saved", Severity.Success);
        }
        else
        {
            Snackbar.Add("Could not save the currency.", Severity.Error);
        }
    }
}
