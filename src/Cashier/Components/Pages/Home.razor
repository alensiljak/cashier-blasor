@page "/"

@using Microsoft.Fast.Components.FluentUI.DesignTokens

<FluentDesignSystemProvider AccentBaseColor=@Palette.Primary BaseLayerLuminance="1">
    <FluentHeader class="glossy">
        <FluentIcon Icon="Cashier.Code.LucideIcons24.Menu" Slot="start" />
        <div style="color: @Palette.Info;">
                Hi!!!
        </div>
        <FluentLabel Color="@Color.Accent">Label</FluentLabel>
        <FluentIcon Icon="Cashier.Code.LucideIcons24.MoreVertical" Slot="end" />
    </FluentHeader>
</FluentDesignSystemProvider>

<FluentToolbar Orientation="Orientation.Horizontal">
    <FluentIcon Title="Front" Icon="Cashier.Code.LucideIcons24.Star" Slot="start" Color="Color.Accent" />
    <FluentIcon Title="Back" Icon="Cashier.Code.LucideIcons24.Settings" Slot="end" Color="Color.Accent" />
    <FluentLabel Color="Color.Success">Hello!</FluentLabel>
</FluentToolbar>

<PageTitle>Home</PageTitle>

<article class="content">

    <h1>Hello, world!</h1>

    <p>Welcome to the new Cashier app.</p>

    <p>Interesting links:</p>

    <ul>
        <li><a href="/sidebar-demo">Sidebar Demo</a></li>
        <li><a href="/data-demo">Data Demo</a></li>
    </ul>

    <FluentBodyContent>
        This is fluent body content.
    </FluentBodyContent>
</article>

@code {
    @* [Inject]
private AccentBaseColor AccentBaseColor { get; set; } = default!; *@

    @* private FluentHeader? refHeader; *@

    protected override async Task OnInitializedAsync()
    {
        // Your initialization code goes here

        var x = Color.Accent;
        Console.WriteLine("accent:", x);

    }

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
await AccentBaseColor.SetValueFor(refHeader!.Element, Palette.Accent.ToSwatch());
}
} *@
}