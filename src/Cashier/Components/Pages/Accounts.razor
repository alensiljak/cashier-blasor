@page "/accounts"

@inject IJSRuntime JSRuntime

@using MudBlazor

<ToolbarMud>
    <Title>Accounts</Title>
</ToolbarMud>

@* Search *@
<MudPaper Class="px-2 py-1 d-flex justify-center">
    <div style="width: 500px;">
        <MudTextField AutoFocus="true" T="string" Adornment="Adornment.End" AdornmentIcon="@IconsMud.Search" Label="Search" 
                      Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth="false" Clearable="true"
                      DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch" 
                      @bind-Value="searchTerm" />
    </div>
</MudPaper>

@* Accounts list *@
<MudSimpleTable>
    <tbody>
        @foreach(var account in accounts)
        {
            <tr>
                <td>@account.Name</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    string? searchTerm;
    List<Account> accounts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        var db = DexieDAL.CreateInstance(JSRuntime);
        var records = await db.Accounts
            .OrderBy("name")
            // .Limit(100)
            .ToList();

        if (searchTerm != null)
        {
            var regex = new ListSearch().getRegex(searchTerm);
            accounts = records.FindAll(acc => regex.Match(acc.Name!).Success);
            // var filter = await table.Filter("test").ToList();
        }
        else
        {
            accounts = records;
        }

        // take only the top 100 results
        accounts = accounts.Take(100).ToList();
    }

    /// <summary>
    /// Handle debounced search term.
    /// </summary>
    async Task OnSearch()
    {
        await loadData();
    }
}
