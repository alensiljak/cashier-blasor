@page "/accounts"

@using MudBlazor

@inject IDexieDAL db
@inject AppState State
@inject IJSRuntime JSRuntime

<ToolbarMud>
    <Title>Accounts</Title>
</ToolbarMud>

@* Search *@
<MudPaper Class="px-2 py-1 d-flex justify-center">
    <div style="width: 500px;">
        <MudTextField AutoFocus="true" T="string" Adornment="Adornment.End" AdornmentIcon="@IconsMud.Search" Label="Search"
                      Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth="false" Clearable="true"
                      DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch"
                      @bind-Value="searchTerm" />
    </div>
</MudPaper>

@* Accounts list *@
@*
<MudDataGrid T="Account" Items="accounts" Height="85vh" Virtualize="true" RowClick="@OnRowClick">
    <Columns>
        <PropertyColumn Property="@(a => a.Name)" HeaderStyle="display: none;" CellClass="px-1" />
    </Columns>
</MudDataGrid>
*@
@if (accounts == null)
{
    <MudText>Loading accounts...</MudText>
}
else
{
    <MudSimpleTable Style="height: 85vh; overflow-y: scroll;">
        <tbody>
            @foreach (var account in accounts)
            {
                <tr @onclick="@(() => OnTrClick(account.Name!))">
                    <td>@account.Name</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
    string? searchTerm;
    List<Account> accounts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        var records = await db.Accounts
            .OrderBy("name")
            // .Limit(100)
            .ToList();

        if (searchTerm != null)
        {
            var regex = new ListSearch().getRegex(searchTerm);
            accounts = records.FindAll(acc => regex.Match(acc.Name!).Success);
            // var filter = await table.Filter("test").ToList();
        }
        else
        {
            accounts = records;
        }

        // take only the top 100 results
        accounts = accounts.Take(100).ToList();
    }

    async Task OnRowClick(DataGridRowClickEventArgs<Account> args)
    {
        await SelectAccount(args.Item.Name!);
    }

    async Task OnTrClick(string accountName)
    {
        await SelectAccount(accountName);
    }

    /// <summary>
    /// Handle debounced search term.
    /// </summary>
    async Task OnSearch()
    {
        await loadData();
    }

    /// <summary>
    /// Separated so that it can be shared with the two events.
    /// </summary>
    /// <param name="accountName"></param>
    /// <returns></returns>
    /// <exception cref="Exception"></exception>
    async Task SelectAccount(string accountName)
    {
        var meta = State.SelectionModeMetadata;
        if (meta == null) return;
        if (meta.SelectionType != SelectionType.Account) throw new Exception("Invalid selection mode!");

        meta.SelectedId = accountName;

        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
