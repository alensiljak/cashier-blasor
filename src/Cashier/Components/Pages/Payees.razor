@page "/payees"

@using MudBlazor

@inject IDexieDAL db
@inject AppState State
@inject NavigationManager NavMan
@inject IJSRuntime JSRuntime
@inject NotificationService Notification

<ToolbarMud>
    <Title>Payees</Title>
    <ContextMenuItems>
        <MudListItem Icon="@IconsMud.Check" @onclick="OnShowAllClicked">Show All</MudListItem>

    </ContextMenuItems>
</ToolbarMud>

@if (payees == null)
{
    <MudText>Loading...</MudText>
}
else
{
    @* Search *@
    <MudPaper Class="px-2 py-1 d-flex justify-center">
        <div style="width: 500px;">
            <MudTextField AutoFocus="true" T="string" Adornment="Adornment.End" AdornmentIcon="@IconsMud.Search" Label="Search"
                          Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" FullWidth="false"
                          DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch"
                          @bind-Value="searchTerm" />
        </div>
    </MudPaper>

    @*
    <MudDataGrid T="Payee" Items="@payees" Height="85vh" Virtualize="true" RowClick="@OnRowClick">
        <Columns>
            <PropertyColumn Property="@(p => p.Name)" HeaderStyle="display: none;" CellClass="px-1" />
        </Columns>
    </MudDataGrid>
*@
    <MudSimpleTable Style="height: 85vh; overflow-y: scroll;">
        <tbody>
            @foreach (var payee in payees)
            {
                <tr @onclick="@(() => OnTrClick(payee.Name!))">
                    <td>@payee.Name</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@* FAB *@
@if (ShowNewPayeeButton)
{
    <MudFab Color="Color.Tertiary" IconColor="Color.Secondary" StartIcon="@IconsMud.Check"
            Style="@Constants.DefaultFabPosition" @onclick="OnFab" />
}

@code {
    string? searchTerm;
    List<Payee> payees = [];
    bool _limitList = true;     // Show only a limited number of items to reduce load time.

    private bool IsPickerMode
    {
        get
        {
            // DebugPrinter.PrintJson(State.SelectionModeMetadata);

            return (State.SelectionModeMetadata != null);
        }
    }

    /// <summary>
    /// The FAB is used when searching for a name and there is no item in the list.
    /// Tapping the button will accept the search text as the new Payee.
    /// This is only used in Picker mode. There is no point in adding Payees on its own.
    /// </summary>
    private bool ShowNewPayeeButton
    {
        get
        {
            var show = IsPickerMode && !string.IsNullOrWhiteSpace(searchTerm) && payees.Count == 0;
            return show;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        BlazorDexie.Database.Collection<Payee, string> records;

        // Search by using .filter() query directly on the storage.
        if (searchTerm != null)
        {
            var regex = new ListSearch().GetJsFilterFunction("name");
            records = db.Payees.Filter(regex, new[] { searchTerm });
        }
        else
        {
            records = db.Payees;
        }

        // Limit results
        if (_limitList)
        {
            records = records.Limit(25);
        }

        payees = await records.ToList();
    }

    /// <summary>
    /// Accepts the search text as the new Payee.
    /// </summary>
    async Task OnFab()
    {
        if(string.IsNullOrWhiteSpace(searchTerm))
        {
            Notification.Warning("The search term is empty!");
            return;
        }

        await SelectPayee(searchTerm);
    }

    async Task OnRowClick(DataGridRowClickEventArgs<Payee> args)
    {
        await SelectPayee(args.Item.Name!);
    }

    /// <summary>
    /// Handle debounced search term.
    /// </summary>
    async Task OnSearch()
    {
        await loadData();
    }

    async Task OnShowAllClicked()
    {
        State.CloseMenu();

        _limitList = !_limitList;

        if (_limitList)
        {
            Notification.Info("Showing limited data");
        }
        else
        {
            Notification.Info("Showing all data");
        }

        await loadData();
    }

    async Task OnTrClick(string payeeName)
    {
        await SelectPayee(payeeName);
    }

    async Task SelectPayee(string payeeName)
    {
        var meta = State.SelectionModeMetadata;
        if (meta == null) return;
        if (meta.SelectionType != SelectionType.Payee) throw new Exception("Invalid selection mode!");

        meta.SelectedId = payeeName;

        await new RouterService(JSRuntime).Back();
    }
}
