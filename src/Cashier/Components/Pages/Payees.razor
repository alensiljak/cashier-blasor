@page "/payees"

@using MudBlazor

@inject IDexieDAL db
@inject AppState State
@inject NavigationManager NavMan
@inject IJSRuntime JSRuntime

<ToolbarMud>
    <Title>Payees</Title>
</ToolbarMud>

@if (payees == null)
{
    <MudText>Loading...</MudText>
}
else
{
    @* Search *@
    <MudPaper Class="px-2 py-1 d-flex justify-center">
        <div style="width: 500px;">
            <MudTextField AutoFocus="true" T="string" Adornment="Adornment.End" AdornmentIcon="@IconsMud.Search" Label="Search"
                          Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" FullWidth="false"
                          DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch" 
                          @bind-Value="searchTerm" />
        </div>
    </MudPaper>

@*
    <MudDataGrid T="Payee" Items="@payees" Height="85vh" Virtualize="true" RowClick="@OnRowClick">
        <Columns>
            <PropertyColumn Property="@(p => p.Name)" HeaderStyle="display: none;" CellClass="px-1" />
        </Columns>
    </MudDataGrid>
*@
    <MudSimpleTable Style="height: 85vh; overflow-y: scroll;">
        <tbody>
            @foreach (var payee in payees)
            {
                <tr @onclick="@(() => OnTrClick(payee.Name!))">
                    <td>@payee.Name</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

}

@code {
    string? searchTerm;
    List<Payee> payees = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    async Task loadData()
    {
        var records = await db.Payees.ToList();

        if (searchTerm != null)
        {
            var regex = new ListSearch().getRegex(searchTerm);
            payees = records.FindAll(acc => regex.Match(acc.Name!).Success);
        }
        else
        {
            payees = records;
        }

        // load only the first 100
        // payees = payees.Take(100).ToList();
    }

    async Task OnRowClick(DataGridRowClickEventArgs<Payee> args)
    {
        await SelectPayee(args.Item.Name!);
    }

    /// <summary>
    /// Handle debounced search term.
    /// </summary>
    async Task OnSearch()
    {
        await loadData();
    }

    async Task OnTrClick(string payeeName)
    {
        await SelectPayee(payeeName);
    }

    async Task SelectPayee(string payeeName)
    {
        var meta = State.SelectionModeMetadata;
        if (meta == null) return;
        if (meta.SelectionType != SelectionType.Payee) throw new Exception("Invalid selection mode!");

        meta.SelectedId = payeeName;

        await new RouterService(JSRuntime).Back();
    }
}
