@* Touch gesture handling adapted from https://github.com/EdCharbeneau/BlazorPowerHour/issues/2#issuecomment-754687360 *@

<section class="gesture-handler-container" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd">
    @ChildContent
</section>

@code {
    public enum SwipeDirection { Left, Right, Down, Up }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    // public Func<SwipeDirection, Task> OnSwipeAsync { get; set; } = GenericHandlerFunctions.NoOpAsync;
    public Func<SwipeDirection, Task> OnSwipeAsync { get; set; } = async (SwipeDirection direction) => { await Task.CompletedTask; };

    private (TouchPoint ReferencePoint, DateTime StartTime) _startPoint;

    private void HandleTouchStart(TouchEventArgs t)
    {
        _startPoint.ReferencePoint = t.TargetTouches[0];
        _startPoint.StartTime = DateTime.Now;
    }

    private void HandleTouchEnd(TouchEventArgs t)
    {
        // const double swipeThreshold = 0.8;
        const double swipeThreshold = 0.6;

        if (_startPoint.ReferencePoint == null)
        {
            return;
        }

        var endReferencePoint = t.ChangedTouches[0];
        var diffX = _startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
        var diffY = _startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
        var diffTime = DateTime.Now - _startPoint.StartTime;
        var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
        var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

        if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
        if (Math.Abs(velocityX - velocityY) < .5) return;

        if (velocityX >= swipeThreshold)
        {
            OnSwipeAsync(diffX < 0 ? SwipeDirection.Right : SwipeDirection.Left);
        }
        if (velocityY >= swipeThreshold)
        {
            OnSwipeAsync(diffY < 0 ? SwipeDirection.Down : SwipeDirection.Up);
        }
    }
}