@*
    Journal Card
*@
@inject ISnackbar Snackbar
@inject IDexieDAL _db
@inject NavigationManager NavMan
@inject NotificationService Notification

@using MudBlazor

<MudCard Class="@Class" Outlined="true" @onclick="OnCardClick">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.Scroll" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Device Journal</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @* <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" /> *@
            @* <MudIcon Icon="@IconsMud.Settings" /> *@
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (Xacts == null || Xacts.Count == 0)
        {
            <MudText Class="pl-2">The device journal is empty</MudText>
        }
        else
        {
            <MudSimpleTable Dense>
                @* Define the widths of the columns. *@
                <colgroup>
                    <col style="width: 50px;" />
                    <col style="flex-grow: 1;" />
                    <col style="width: 120px;" />
                </colgroup>
                <tbody>
                    @foreach (var xact in Xacts)
                    {
                        var index = Xacts.IndexOf(xact);
                        var balance = Balances.ElementAtOrDefault(index);

                        <tr>
                            <td class="pl-2 pr-1">@xact.Date.ToString(Constants.ISODateFormat)</td>
                            <td class="flex-grow-1">@xact?.Payee</td>
                            <td style="text-align: end; @($"color: {GetXactColour(index)};")" class="pl-1 pr-2">
                                @balance?.Quantity @balance?.Currency
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudCardContent>
    <MudCardActions Class="justify-center">
        <MudButton StartIcon="@IconsMud.FileUp" Variant="Variant.Outlined" Color="Color.Tertiary"
                   @onclick="OnExportClick">Export</MudButton>
    </MudCardActions>

</MudCard>

@code {
    [Parameter]
    public string? Class { get; set; }

    private List<Xact> Xacts { get; set; } = [];
    private List<Money> Balances { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await loadData();
    }

    string GetXactColour(int index)
    {
        if (index > Balances.Count - 1) return string.Empty;

        var amount = Balances[index];
        string colour = string.Empty;

        switch (amount.Quantity)
        {
            case var n when n < 0:
                colour = "var(--mud-palette-secondary)";
                break;
            case var n when n == 0:
                colour = "var(--mud-palette-tertiary)";
                break;
            case var n when n > 0:
                colour = "var(--mud-palette-primary)";
                break;
        }

        // Transfers are yellow
        var tx = Xacts[index];
        if (tx.Postings?.Count(p => p.Account!.StartsWith("Assets:")) == 2)
        {
            colour = "yellow";
        }

        return colour;
    }

    async Task loadData()
    {
        try
        {
            Xacts = await _db.Xacts
                .OrderBy("date")
                .Reverse()
                .Limit(5)
                .ToList();

            Balances = new TransactionAugmenter().calculateTxAmounts(Xacts);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Notification.Error(ex.Message);
        }
    }

    void OnCardClick()
    {
        NavMan.NavigateTo("/journal");
    }

    void OnExportClick()
    {
        NavMan.NavigateTo("/export/journal");
    }

    void OnListClick()
    {
        Console.WriteLine("list clicked");
    }
}
