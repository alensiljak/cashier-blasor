@*
    This is a monthly forecast chart for one account.
*@
@using MudBlazor

@inject IDexieDAL _db
@inject ISettingsService _settings

<h3>Daily Forecast Chart</h3>

<div>
    This chart is projecting the forecast in day units, within the given period.
</div>

<MudChart ChartType="ChartType.StackedBar" ChartSeries="@ChartSeries" LegendPosition="@Position.Top"
           ChartOptions="@_chartOptions" XAxisLabels="@XAxisLabels"
           @bind-SelectedIndex="SelectedIndex"></MudChart>
@*  *@

@code {
    /// <summary>
    /// Number of days for forecast, starting from the day after today.
    /// </summary>
    [Parameter]
    public ushort DaysCount { get; set; } = 7;

    /// <summary>
    /// Names of the accounts to include.
    /// </summary>
    [Parameter]
    public List<string> AccountNames { get; set; } = [];

    private int SelectedIndex = -1; //default value cannot be 0 -> first selected index is 0.
    public string[] XAxisLabels = [];

    // private string[] InputLabels = { "yo", "blah" };
    private List<ChartSeries> ChartSeries = [];
    private ChartOptions _chartOptions = new ChartOptions
    {
        YAxisTicks = 250,
        MaxNumYAxisTicks = 3
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // set up days
        CreateXAxis();

        await loadDataAsync();
    }

    private void CreateXAxis() {
        // Create labels for the days ahead.
        var labels = new string[DaysCount+1];

        for (var x = 0; x <= DaysCount; x++)
        {
            // labels on weeks only
            if ((x+1) % 7 == 0)
            {
                labels[x] = (x+1).ToString();
            } else
            {
                labels[x] = string.Empty;
            }
        }

        XAxisLabels = labels;
        // StateHasChanged();
    }

    async Task loadDataAsync()
    {
        // load the account.
        foreach(var accountName in this.AccountNames)
        {
            await LoadAccountAsync(accountName);
        }

        // Set the max Y value to be the max value in the series.
        double maxValue = 0;
        foreach(var item in ChartSeries)
        {
            var max = item.Data.Max();
            maxValue = max > maxValue ? max : maxValue;
        }

        const int TickNumber = 5;
        _chartOptions.YAxisTicks = Convert.ToInt32(maxValue / TickNumber);
        _chartOptions.MaxNumYAxisTicks = Convert.ToInt32(maxValue);
    }

    /// <summary>
    /// Load account details and create an entry in the bar chart.
    /// </summary>
    /// <param name="accountName"></param>
    /// <returns></returns>
    async Task LoadAccountAsync(string accountName)
    {
        var entry = new ChartSeries();
        entry.Name = accountName;
        entry.Data = new double[DaysCount];
        ChartSeries.Add(entry);

        // load account record, with balance.
        var account = await _db.Accounts.Get(accountName);
        if(account == null)
        {
            throw new Exception("Account could not be loaded!");
        }

        // get initial balance
        var initialValue = account.CurrentValue == null ? 0 : Double.Parse(account.CurrentValue);
        entry.Data[0] = initialValue;

        // todo: Add local transactions

        // todo: project scheduled transactions
        await LoadScheduledXactsFor(accountName);


        for(var day = 1; day < DaysCount; day++)
        {
            // todo: calculate values for subsequent days
            entry.Data[day] = 10 + day * 2;
        }

        // AccountViewModel? result = null;
        try
        {
            // var currency = await _settings.GetDefaultCurrency();

            // var calc = new ForecastCalculator(_db, currency);
            // var account = await calc.GetAccountBalance(accountName);
        }
        catch (Exception e)
        {
            // Notification.Error(e.Message);
        }
    }

    private async Task LoadScheduledXactsFor(string accountName)
    {
        // var x = await _db.ScheduledXacts.Where(nameof(ScheduledXact.Transaction.Postings))
        // var regex = new ListSearch().GetJsFilterFunction("name");
        // var records = _db.Payees.Filter(regex, new[] { searchTerm });

        // Load all scheduled transactions for now
        var list = await _db.ScheduledXacts.ToList();
        var xactsForAccount = list.Where(sx =>
            sx.Transaction != null && sx.Transaction.Postings != null &&
            sx.Transaction.Postings.Any(p => p.Account != null && p.Account.Contains(accountName)));
        
        Log.debug(xactsForAccount);
    }
}
