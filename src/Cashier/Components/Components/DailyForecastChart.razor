@*
    This is a monthly forecast chart for one account.
*@
@using MudBlazor

@inject IDexieDAL _db
@inject ISettingsService _settings

<MudChart ChartType="ChartType.StackedBar" ChartSeries="@ChartSeries" LegendPosition="@Position.Top"
          ChartOptions="@_chartOptions" XAxisLabels="@XAxisLabels" 
          Width="100%"
          @bind-SelectedIndex="SelectedIndex"></MudChart>
@*  *@

@code {
    /// <summary>
    /// Number of days for forecast, starting from the day after today.
    /// </summary>
    [Parameter]
    public ushort DaysCount { get; set; } = 7;

    /// <summary>
    /// Names of the accounts to include.
    /// </summary>
    [Parameter]
    public List<string> AccountNames { get; set; } = [];

    [Parameter]
    public int Height{ get; set; }

    private int SelectedIndex = -1; //default value cannot be 0 -> first selected index is 0.
    public string[] XAxisLabels = [];

    // private string[] InputLabels = { "yo", "blah" };
    private List<ChartSeries> ChartSeries = [];
    private ChartOptions _chartOptions = new ChartOptions
        {
            YAxisTicks = 250,
            MaxNumYAxisTicks = 3
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // set up days
        CreateXAxis();

        await loadDataAsync();
    }

    private double CalculateMaxAmount()
    {
        // Set the max Y value to be the max value in the series.
        double[] maximums = new double[ChartSeries.Count];
        double maxValue = 0;
        for (var i = 0; i < ChartSeries.Count; i++)
        {
            // get Max for each series.
            maximums[i] = ChartSeries[i].Data.Max();
        }
        // Get Max value for all series.
        maxValue = maximums.Max();
        return maxValue;
    }

    private void CreateXAxis()
    {
        // Create labels for the days ahead.
        var labels = new string[DaysCount + 1];

        for (var x = 0; x <= DaysCount; x++)
        {
            // labels on weeks only
            if (x % 7 == 0)
            {
                labels[x] = x.ToString();
            }
            else
            {
                labels[x] = string.Empty;
            }
        }

        XAxisLabels = labels;
        // StateHasChanged();
    }

    async Task loadDataAsync()
    {
        // load the account.
        foreach (var accountName in this.AccountNames)
        {
            await PopulateAccountAsync(accountName);
        }

        var maxValue = CalculateMaxAmount();
        const int TickNumber = 5;  // maximum number of lines.
        _chartOptions.YAxisTicks = Convert.ToInt32(maxValue / TickNumber);
        _chartOptions.MaxNumYAxisTicks = Convert.ToInt32(maxValue);
    }

    /// <summary>
    /// Load account details and create an entry in the bar chart.
    /// </summary>
    /// <param name="accountName"></param>
    /// <returns></returns>
    async Task PopulateAccountAsync(string accountName)
    {
        var entry = new ChartSeries();
        entry.Name = AccountService.GetShortAccountName(accountName);
        entry.Data = new double[DaysCount + 1];
        ChartSeries.Add(entry);

        // load account record, with balance.
        var account = await LoadAccountAsync(accountName);

        // get initial balance
        var initialValue = GetInitialValue(account);
        entry.Data[0] = initialValue;

        // todo: Add local transactions

        await AddScheduledXacts(accountName, entry);
    }

    private async Task AddScheduledXacts(string accountName, ChartSeries entry)
    {
        // calculate max date
        var maxDate = DateOnly.FromDateTime(DateTime.Today.AddDays(DaysCount));
        // project scheduled transactions
        var scheduledXacts = await LoadScheduledXactsFor(accountName, maxDate);

        // todo: project the schedule into the selected period (i.e. if a xact repeats daily, it should be
        // included 7 times in a weekly forecast).

        // calculate values for subsequent days
        AddScheduledXactsAsync(accountName, entry.Data, scheduledXacts);
        // Perform the calculation.
        CalculateDailyAmounts(entry.Data);
    }

    private double GetInitialValue(Account? account)
    {
        if (account == null) return 0;

        var balanceAmount = new AccountService().GetAccountBalance(account).Quantity;
        if (balanceAmount == null) return 0;

        return (double)balanceAmount;
    }

    private async Task<Account> LoadAccountAsync(string accountName)
    {
        var account = await _db.Accounts.Get(accountName);
        if (account == null)
        {
            throw new Exception("Account could not be loaded!");
        }
        return account;
    }

    private async Task<List<ScheduledXact>> LoadScheduledXactsFor(string accountName, DateOnly maxDate)
    {
        // Load all scheduled transactions for now
        var list = await _db.ScheduledXacts
            .OrderBy(nameof(ScheduledXact.NextDate))
            .ToList();
        var xactsForAccount = list.Where(sx =>
            sx.Transaction != null && sx.Transaction.Postings != null &&
            sx.Transaction.Postings.Any(p => p.Account != null && p.Account.Contains(accountName))
            // limit by date
            && sx.Transaction.Date <= maxDate
        );

        return xactsForAccount.ToList();
    }

    /// <summary>
    /// Applies scheduled transactions to the data series.
    /// </summary>
    /// <param name="amounts"></param>
    /// <param name="xacts"></param>
    private void AddScheduledXactsAsync(string accountName, double[] amounts, List<ScheduledXact> schXacts)
    {
        // prepare transactions
        var xacts = schXacts.Select(sx => sx.Transaction).ToList();
        if (xacts == null) return;
        XactAugmenter.calculateEmptyPostingAmounts(xacts);

        // starting from today
        var today = DateTime.Today;

        foreach (var sx in schXacts)
        {
            var diff = sx.NextDate.ToDateTime(TimeOnly.MinValue) - today;
            var index = Convert.ToInt16(diff.TotalDays);
            // Handle overdue payments (negative days).
            if (index < 0) index = 0;

            var postings = sx.Transaction?.Postings?.Where(p => p.Account == accountName);
            if (postings == null) continue;

            // add all the posting amounts
            var schDailyAmount = new decimal(0);
            foreach (var posting in postings)
            {
                schDailyAmount += posting.Amount.GetValueOrDefault();
            }

            amounts[index] += ((double)schDailyAmount);
        }
    }

    /// <summary>
    /// A kind of a hack. Since the daily amounts have been inserted already, just recalculate the daily balance
    /// based on the balance of the previous day.
    /// </summary>
    /// <param name="amounts"></param>
    private void CalculateDailyAmounts(double[] amounts)
    {
        double balance = 0; // balance on the previous day. Current balance.
        for(var i = 0; i < amounts.Length; i++)
        {
            var dailyBalance = balance + amounts[i];    // add today's transactions to the current balance.
            amounts[i] = dailyBalance;  // set the value in the daily cell, in the array.
            balance = dailyBalance;     // update the current balance.
        }
    }
}
