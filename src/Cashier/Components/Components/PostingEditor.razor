@using MudBlazor
@using System.Drawing

<MudTextField T="string" @bind-Value="Posting!.Account" Placeholder="Account" ReadOnly="true" @onclick="OnAccountClicked" />

<MudGrid>
    @* Sign *@
    <MudItem xs="2">
        @if (EditableAmount.HasValue)
        {
            <MudIconButton Icon="@GetSignIcon()" @onclick="ToggleSign" Style="@(GetColourStyle())" />
        }
    </MudItem>
    @* Amount *@
    <MudItem xs="6">
        <MudTextField T="decimal?" @ref="amountField" @bind-Value="EditableAmount" InputType="InputType.Number"
                      Placeholder="Amount" Class="text-right" Immediate="true"
                      @onfocus="async () => await amountField!.SelectAsync()"
                      Style="@GetBackgroundColourStyle()" />
    </MudItem>
    @* Currency *@
    <MudItem lg="4" xs="4" Class="pl-0">
        <MudTextField T="string" @bind-Value="Posting.Currency" Placeholder="Currency" />
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Posting Posting { get; set; } = default!;

    /// <summary>
    /// Event when the Account is tapped
    /// </summary>
    [Parameter]
    public EventCallback OnAccountClick { get; set; }

    MudTextField<decimal?> amountField { get; set; } = default!;

    bool positiveSign;

    decimal? EditableAmount
    {
        get
        {
            decimal? value = Posting.Amount.HasValue ? Math.Abs(Posting.Amount.Value) : null;

            return value;
        }
        set
        {
            if (value == 0)
            {
                Posting.Amount = null;
            }
            else
            {
                Posting.Amount = GetActualAmount();
            }
        }
    }

    decimal GetActualAmount()
    {
        if (!Posting.Amount.HasValue)
        {
            return 0;
        }

        // posting has value
        var amount = Math.Abs(Posting.Amount.Value);
        amount = positiveSign ? amount : amount * -1;
        return amount;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Initialize the sign when a Posting is loaded.
        if (Posting.Amount.HasValue)
        {
            positiveSign = Posting.Amount.Value >= 0;
        }
    }

    string GetAmountColour()
    {
        var amount = GetActualAmount();

        return AppService.GetAmountColour(amount);
    }

    string GetBackgroundColourStyle()
    {
        var colour = GetAmountColour();
        if (string.IsNullOrEmpty(colour)) return string.Empty;

        var c = ColorTranslator.FromHtml(colour);
        var rgba = $"rgb({c.R} {c.G} {c.B} / 20%)";
        return $"background-color: {rgba};";
    }

    string GetColourStyle()
    {
        var colour = GetAmountColour();
        return $"color: {colour};";
    }

    string GetSignIcon()
    {
        return positiveSign ? IconsMud.PlusSquare : IconsMud.MinusSquare;
    }

    private async Task OnAccountClicked()
    {
        await OnAccountClick.InvokeAsync();
    }

    void ToggleSign()
    {
        positiveSign = !positiveSign;

        updatePostingSign();

        StateHasChanged();
    }

    void updatePostingSign()
    {
        Posting.Amount = GetActualAmount();
    }
}
