@*
    Scheduled Transactions Card
*@
@using MudBlazor

@inject NotificationService Notification
@inject IDexieDAL _db
@inject NavigationManager NavMan

<MudCard Class="@Class" Outlined="true" @onclick="OnCardClick" Style="background-color: transparent;">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.CalendarClock" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Upcoming Transactions</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @* <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" /> *@
            @* <MudIcon Icon="@IconsMud.Settings" /> *@
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (_scheduledXacts == null || _scheduledXacts.Count == 0)
        {
            <MudText>There are no scheduled transactions</MudText>
        }
        else
        {
            @*<MudList T="string" Dense>
                @foreach (var sx in _scheduledXacts)
                {
                    var index = _scheduledXacts.IndexOf(sx);

                    <MudListItem>
                    <MudStack Row="true" StretchItems="StretchItems.Middle">
                        <span>@sx.NextDate</span>
                        <span>@sx.Transaction?.Payee</span>
                        <span style="text-align: end; color: @(Formatter.GetMoneyColor(_amounts[index]));">@_amounts[index]</span>
                    </MudStack>
                    </MudListItem>
                }
            </MudList>*@

            <MudSimpleTable Dense Style="background-color: transparent;">
                <colgroup>
                    @* <col style="width: 90px;" /> *@
                    @* <col style="flex-grow: 1;" /> *@
                </colgroup>
                <tbody>
                    @{
                        DateOnly? currentDate = null;
                        var showDate = true;
                    }

                    @foreach (var sx in _scheduledXacts)
                    {
                        if (currentDate != sx.NextDate)
                        {
                            currentDate = sx.NextDate;
                            showDate = true;
                        } else
                        {
                            showDate = false;
                        }
                        var index = _scheduledXacts.IndexOf(sx);

                        <tr>
                            <td class="pl-1 pr-1" style="color: @GetDateColour(sx.NextDate)">
                                @if(showDate) {
                                @sx.NextDate.ToString(Constants.ISODateFormat)
                                }
                            </td>
                            <td class="px-0">
                                @sx.Transaction?.Payee
                            </td>
                            <td class="pl-0 pr-1" style="text-align: end; color: @(Formatter.GetMoneyColor(_amounts[index]));">
                                @_amounts[index]
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudCardContent>
    <MudCardActions Class="justify-center">
        <MudButton StartIcon="@IconsMud.CalendarDays" Variant="Variant.Outlined" Color="Color.Tertiary"
                   @onclick="OnCalendarClick">Calendar</MudButton>
    </MudCardActions>

</MudCard>

@code {
    [Parameter]
    public string? Class { get; set; }

    List<ScheduledXact> _scheduledXacts { get; set; } = [];
    List<Money> _amounts = [];
    AppService _appService = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _appService = new AppService();

        await loadData();

        CalculateAmounts();
    }

    void CalculateAmounts()
    {
        var xacts = this._scheduledXacts.Select(sx => sx.Transaction);
        var augmenter = new XactAugmenter();
        _amounts = augmenter.calculateXactAmounts(xacts);
    }

    string GetDateColour(DateOnly date)
    {
        return Formatter.GetDateColour(date);
    }

    async Task loadData()
    {
        _scheduledXacts = await _db.ScheduledXacts
            .OrderBy(nameof(ScheduledXact.NextDate))
            //.SortBy("transaction.payee")
            .Limit(5)
            .ToList();
    }

    void OnCalendarClick()
    {
        Notification.Info("Not Implemented");
    }

    void OnCardClick()
    {
        NavMan.NavigateTo("/scheduled-xacts");
    }
}
