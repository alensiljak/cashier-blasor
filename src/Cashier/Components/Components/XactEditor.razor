@* Transaction Editor component used in the Transaction Edit page *@

@using MudBlazor

@inject AppState State
@inject NavigationManager NavMan
@inject IDexieDAL db
@inject ISettingsService settings

@* Date *@
<MudDatePicker @ref="_datePicker" Placeholder="Date" DateFormat="@FixedSettings.DateFormat"
               AutoClose="true" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.CalendarDays"
               @bind-Date="date" PickerVariant="PickerVariant.Dialog">
    <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
    </PickerActions>
</MudDatePicker>

@* Payee *@
<MudTextField T="string" Placeholder="Payee" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.Users2"
              @bind-Value="Payee" @onclick="OnPayeeClick" />

<MudTextField T="string" Placeholder="Note" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.FileText" />

@* Postings *@
<MudText Align="Align.Center" Class="pt-1">Postings</MudText>

<MudPaper Class="d-flex justify-center gap-10">
    <MudIconButton Icon="@IconsMud.PlusCircle" />
    <MudIconButton Icon="@IconsMud.ArrowUpDown" />
    <MudIconButton Icon="@IconsMud.Trash" />
</MudPaper>

@if (State?.Xact?.Postings != null)
{
    @foreach (var posting in Postings)
    {
        var index = State.Xact?.Postings.IndexOf(posting);
        <PostingEditor Posting="posting" OnAccountClick="@(() => OnAccountClicked(index))" />
    }
}

@code {
    MudDatePicker _datePicker = default!;
    DateTime? date
    {
        get
        {
            var dtValue = State?.Xact?.Date.ToDateTime(TimeOnly.MinValue);
            return dtValue;
        }
        set
        {
            if (State == null || State.Xact == null)
            {
                return;
            }

            var dtValue = value;
            if (dtValue == null)
            {
                value = DateTime.Today;
            }
            var doValue = DateOnly.FromDateTime(dtValue!.Value);
            State.Xact.Date = doValue;
        }
    }

    string Payee
    {
        get
        {
            return State?.Xact?.Payee ?? string.Empty;
        }
        set
        {
            State.Xact!.Payee = value;
        }
    }

    List<Posting> Postings
    {
        get
        {
            return State.Xact?.Postings ?? new List<Posting>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (State.SelectionModeMetadata != null)
        {
            await handleSelection();
        }
    }

    async Task handleSelection()
    {
        if (State.Xact == null)
        {
            throw new Exception("No Transaction found in state!");
        }

        var meta = State.SelectionModeMetadata;
        if (meta == null) return;

        switch (meta.SelectionType)
        {
            case SelectionType.Account:
                // get the posting
                if (meta.PostingIndex == null) throw new Exception("Invalid posting index in selection metadata!");
                var posting = State.Xact?.Postings?[meta.PostingIndex.Value];
                if (posting == null) throw new Exception("Posting not found!");
                // load the account
                // if (meta.SelectedId)
                var account = await db.Accounts.Get(meta.SelectedId!);
                if (account == null) throw new Exception("Account not found!");
                var svc = new AccountService();
                var defaultCurrency = await settings.GetSetting<string>(SettingsKeys.currency);
                var balance = svc.GetAccountBalance(account, defaultCurrency);

                posting.Account = account.Name;
                if (posting.Money == null)
                {
                    posting.Money = new Money();
                }
                posting.Money!.Currency = balance.Currency;
                break;

            case SelectionType.Payee:
                State.Xact.Payee = meta.SelectedId;
                // todo: load last transaction
                break;
        }

        State.SelectionModeMetadata = null;
    }

    void OnAccountClicked(int? index)
    {
        var selectionMode = new SelectionModeMetadata()
            {
                // save the index of the posting being edited
                PostingIndex = index,
                SelectionType = SelectionType.Account
            };

        State.SelectionModeMetadata = selectionMode;

        NavMan.NavigateTo("/accounts");
    }

    void OnPayeeClick()
    {
        var selectionMode = new SelectionModeMetadata()
            {
                SelectionType = SelectionType.Payee
            };

        State.SelectionModeMetadata = selectionMode;

        NavMan.NavigateTo("/payees");
    }

    private async Task Today()
    {
        await _datePicker.GoToDate(DateTime.Today);
    }

}
