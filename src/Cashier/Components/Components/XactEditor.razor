@* Transaction Editor component used in the Transaction Edit page *@

@using MudBlazor

@inject AppState State
@inject NavigationManager NavMan

@* Date *@
<MudDatePicker @ref="_datePicker" Placeholder="Date" DateFormat="@FixedSettings.DateFormat"
               AutoClose="true" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.CalendarDays"
               @bind-Date="date">
    <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
    </PickerActions>
</MudDatePicker>

@* Payee *@
<MudTextField T="string" Placeholder="Payee" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.Users2"
              @bind-Value="Payee" @onclick="OnPayeeClick" />

<MudTextField T="string" Placeholder="Note" Adornment="Adornment.Start" AdornmentIcon="@IconsMud.FileText" />

@* Postings *@
<MudText Align="Align.Center" Class="pt-1">Postings</MudText>

<MudPaper Class="d-flex justify-center gap-10">
    <MudIconButton Icon="@IconsMud.PlusCircle" />
    <MudIconButton Icon="@IconsMud.ArrowUpDown" />
    <MudIconButton Icon="@IconsMud.Trash" />
</MudPaper>

@if (State?.Xact?.Postings != null)
{
    @foreach (var posting in Postings)
    {
        var index = State.Xact?.Postings.IndexOf(posting);
        <PostingEditor Posting="posting" OnAccountClick="@(() => OnAccountClicked(index))" />
    }
}

@code {
    MudDatePicker _datePicker = default!;
    DateTime? date
    {
        get
        {
            return State?.Xact?.Date;
        }
        set
        {
            if (State == null || State.Xact == null)
            {
                return;
            }

            State.Xact.Date = value ?? DateTime.Today;
        }
    }

    string Payee
    {
        get
        {
            return State?.Xact?.Payee ?? string.Empty;
        }
        set
        {
            State.Xact!.Payee = value;
        }
    }

    List<Posting> Postings
    {
        get
        {
            return State.Xact?.Postings ?? new List<Posting>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (State.SelectionModeMetadata != null)
        {
            handleSelection();
        }
    }

    void handleSelection()
    {
        if (State.Xact == null)
        {
            throw new Exception("No Transaction found in state!");
        }

        var meta = State.SelectionModeMetadata;
        if (meta == null) return;

        switch (meta.SelectionType)
        {
            case SelectionType.Account:
                break;
            case SelectionType.Payee:
                State.Xact.Payee = meta.SelectedId;
                // todo: load last transaction
                break;
        }

        State.SelectionModeMetadata = null;
    }

    void OnAccountClicked(int? index)
    {
        Console.WriteLine("account clicked on line {0}", index);

        NavMan.NavigateTo("/accounts");
    }

    void OnPayeeClick()
    {
        var selectionMode = new SelectionModeMetadata()
        {
            SelectionType = SelectionType.Payee
        };

        State.SelectionModeMetadata = selectionMode;

        NavMan.NavigateTo("/payees");
    }

    private async Task Today()
    {
        await _datePicker.GoToDate(DateTime.Today);
    }

}
