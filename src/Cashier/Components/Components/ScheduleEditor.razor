@*
    Schedule Editor
*@
@using MudBlazor

@inject AppState _state
@inject NotificationService Notification
@inject NavigationManager NavMan

<div class="@Class">
    <MudText>Repeats</MudText>

    <MudRadioGroup @bind-SelectedOption="@HasRecurrence">
        <MudRadio Option="false">Never</MudRadio>
        <MudRadio Option="true">Every ...</MudRadio>
    </MudRadioGroup>
    @if (HasRecurrence)
    {
        <MudGrid>
            <MudItem xs="6">
                <MudTextField T="int" Placeholder="Count" Class="text-right" @bind-Value="PeriodCount" />
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value="ScXact!.Period">
                    @foreach (var period in _periods)
                    {
                        <MudSelectItem Value="@period">@period</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    }

    <MudText Class="mt-4">
        Ends
    </MudText>

    <MudRadioGroup @bind-SelectedOption="@HasEndDate">
        <MudRadio Option="false">Never</MudRadio>
        <MudRadio Option="true">On ...</MudRadio>
    </MudRadioGroup>
    @if (HasEndDate)
    {
        <MudDatePicker Placeholder="Select Date" DateFormat="@FixedSettings.DateFormat" AutoClose
                       @bind-Date="EndDate" />
    }

    <MudText Class="mt-4">Remarks</MudText>

    <MudTextField T="string" Lines="5" @bind-Value="ScXact!.Remarks" />
</div>

@code {
    [Parameter]
    public string? Class { get; set; }

    ScheduledXact? ScXact;

    List<string> _periods = [];

    DateTime? EndDate
    {
        get
        {
            if (ScXact!.EndDate is null)
            {
                return null;
            }
            else
            {
                var dtValue = ScXact?.EndDate.Value.ToDateTime(TimeOnly.MinValue);
                return dtValue;
            }
        }
        set
        {
            if (ScXact is null) return;

            if (value is null)
            {
                ScXact.EndDate = null;
            }
            else
            {
                var doValue = DateOnly.FromDateTime(value.Value);
                ScXact.EndDate = doValue;
            }
        }
    }

    int PeriodCount
    {
        get
        {
            if (ScXact is null || ScXact.Count is null) return 0;

            return int.Parse(ScXact.Count);
        }
        set
        {
            ScXact!.Count = value.ToString();
        }
    }

    bool HasRecurrence
    {
        get
        {
            if (ScXact is null) return false;

            var value = !string.IsNullOrWhiteSpace(ScXact.Count) && !string.IsNullOrWhiteSpace(ScXact.Period);
            return value;
        }
        set
        {
            if (value)
            {
                ScXact!.Period = PeriodNames.Days;
                ScXact.Count = "1";
            }
            else
            {
                ScXact!.Count = null;
                ScXact!.Period = null;
            }
        }
    }

    bool HasEndDate
    {
        get
        {
            if (ScXact is null) return false;

            return ScXact.EndDate.HasValue;
        }
        set
        {
            if(value)
            {
                ScXact!.EndDate = DateOnly.FromDateTime(DateTime.Now);
            } else
            {
                ScXact!.EndDate = null;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ScXact = _state.ScheduledXact;
        if (ScXact is null)
        {
            Notification.Warning("No Scheduled Transaction found!");
            NavMan.NavigateTo("/scheduled-xacts");
        }

        PopulatePeriods();
    }

    void PopulatePeriods()
    {
        foreach (Periods period in Enum.GetValues(typeof(Periods)))
        {
            var name = PeriodNames.ToString(period);
            _periods.Add(name);
        }
    }
}
