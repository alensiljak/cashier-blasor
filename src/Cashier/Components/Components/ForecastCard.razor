@*
    Favourites card
*@
@using MudBlazor
@using MudBlazor.Charts

@inject NavigationManager NavMan
@inject IDexieDAL _db
@inject NotificationService Notification
@inject ISettingsService _settings

<MudCard @onclick="OnCardClick" Outlined="true" Style="background-color: transparent;">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.Star" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Financial Forecast</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@IconsMud.Settings" OnClick="OnSettingsClicked" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        <div>
            <ul>
                <li>
                    take the current value of an account: @@AccountName,
                    @@Account?.AccountBalance?.Quantity @@Account?.AccountBalance?.Currency
                </li>
                <li>
                    add any local transactions
                </li>
                <li>
                    project the scheduled transactions related to the account
                </li>
                <li>
                    show a bar chart with the balance (Bar or StackedBar for multiple accounts).
                </li>
            </ul>
        </div>

        @if (_accounts.Count == 0)
        {
            <MudText>There are no accounts selected for forecasting</MudText>
        }
        else
        {
            <MudList>
                @foreach (var account in _accounts)
                {
                    <MudListItem>@account.Name</MudListItem>
                }
            </MudList>

            <MudChart ChartType="ChartType.StackedBar" ChartSeries="@ChartSeries" LegendPosition="@Position.Top"
                      XAxisLabels="@XAxisLabels" CanHideSeries="true"
                      InputLabels="@InputLabels" ChartOptions="@_chartOptions"
                      @bind-SelectedIndex="SelectedIndex"></MudChart>

            <DailyForecastChart />
        }
    </MudCardContent>
</MudCard>

@code {
    List<ChartSeries> ChartSeries = [];
    List<Account> _accounts = [];
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct" };
    private int SelectedIndex = -1; //default value cannot be 0 -> first selected index is 0.
    string[] InputLabels = { "yo", "blah" };
    ChartOptions _chartOptions = new ChartOptions
        {
            MaxNumYAxisTicks = 5
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // TODO: Just load an appropriate chart component.

        await LoadData();

        // todo: draw a chart
        CreateDummyData();
    }

    private List<ChartSeries> CreateDummyData()
    {
        // monthly?
        var series = new List<ChartSeries> {
            new ChartSeries { Name = "Cash", Data = new double[] { 125, 20, 50, 75, 1200, 350, 24, 17, 712 } },
            new ChartSeries { Name = "N26", Data = new double[] { 36, 20, 50, 75, 1200, 350, 24, 350, 0 } }
        };

        ChartSeries = series;

        StateHasChanged();

        return series;
    }

    async Task LoadData()
    {
        // get account names
        var accountNames = await _settings.GetSetting<List<string>>(SettingsKeys.ForecastAccounts);
        if (accountNames == null) return;

        foreach (var accountName in accountNames)
        {
            var account = await LoadAccount(accountName);
            if (account == null)
            {
                Console.WriteLine("Could not load account {}", accountName);
                continue;
            }

            // get initial balance
            // account.CurrentValue;

            // todo: Add local transactions
            // todo: project scheduled transactions

            _accounts.Add(account);
        }

    }

    private async Task<AccountViewModel?> LoadAccount(string accountName)
    {
        AccountViewModel? result = null;
        try
        {
            var currency = await _settings.GetDefaultCurrency();

            var calc = new ForecastCalculator(_db, currency);
            var account = await calc.GetAccountBalance(accountName);
            if (account != null)
            {
                result = account;
            }
        }
        catch (Exception e)
        {
            Notification.Error(e.Message);
        }
        return result;
    }

    void OnCardClick()
    {
    }

    void OnSettingsClicked()
    {
        // Open the settings page.
        NavMan.NavigateTo("/forecast-settings");
    }
}
