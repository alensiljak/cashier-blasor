@*
    Favourites card
*@
@using MudBlazor

@inject NavigationManager NavMan
@inject IDexieDAL _db
@inject NotificationService Notification
@inject ISettingsService _settings

<MudCard Class="@Class" @onclick="OnCardClick" Outlined="true" Style="background-color: transparent;">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.Star" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Financial Forecast</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        <div>
            <ul>
                <li>
                    take the current value of an account: @@AccountName,
                    @@Account?.AccountBalance?.Quantity @@Account?.AccountBalance?.Currency
                </li>
                <li>
                    add any local transactions
                </li>
                <li>
                    project the scheduled transactions related to the account
                </li>
                <li>
                    show a line chart with the balance
                </li>
            </ul>
        </div>

        @if (_accounts.Count == 0)
        {
            <MudText>There are no accounts selected for forecasting</MudText>
        }
        else
        {
            <MudList>
                @foreach (var account in _accounts)
                {
                    <MudListItem>@account.Name</MudListItem>
                }
            </MudList>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string? Class { get; set; }

    List<Account> _accounts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();

        // todo: draw a chart
    }

    async Task LoadData()
    {
        // get account names
        var accountNames = await _settings.GetSetting<List<string>>(SettingsKeys.ForecastAccounts);
        if (accountNames == null) return;

        foreach (var accountName in accountNames)
        {
            // todo: Add local transactions
            // todo: project scheduled transactions

            var account = await LoadAccount(accountName);
            if (account != null)
            {
                _accounts.Add(account);
            }
            else
            {
                Console.WriteLine("Could not load account {}", accountName);
            }
        }

    }

    private async Task<AccountViewModel?> LoadAccount(string accountName)
    {
        AccountViewModel? result = null;
        try
        {
            var currency = await _settings.GetDefaultCurrency();

            var calc = new ForecastCalculator(_db);
            var account = await calc.GetAccountBalance(accountName, currency);
            if (account != null)
            {
                result = account;
            }
        }
        catch (Exception e)
        {
            Notification.Error(e.Message);
        }
        return result;
    }

    void OnCardClick()
    {
        // Open the settings page.
        NavMan.NavigateTo("/forecast-settings");
    }
}
