@*
    Favourites card
*@
@using MudBlazor
@using MudBlazor.Charts

@inject NavigationManager NavMan
@inject IDexieDAL _db
@inject NotificationService Notification
@inject ISettingsService _settings

<MudCard @onclick="OnCardClick" Outlined="true" Style="background-color: transparent;">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.LineChart" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Financial Forecast</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@IconsMud.Settings" OnClick="OnSettingsClicked" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (_accountNames.Count == 0)
        {
            <MudText>There are no accounts selected for forecasting</MudText>
        }
        else
        {
            <DailyForecastChart DaysCount="@_days" AccountNames="@_accountNames" />
        }
    </MudCardContent>
</MudCard>

@code {
    List<string> _accountNames = [];
    ushort _days = Constants.DefaultForecastDays;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // TODO: Just load an appropriate chart component.

        await LoadDataAsync();
    }

    async Task LoadDataAsync()
    {
        // get account names
        var accountNames = await _settings.GetSetting<List<string>>(SettingsKeys.ForecastAccounts);
        if (accountNames == null) return;

        _accountNames = accountNames;

        _days = await _settings.GetSetting<ushort>(SettingsKeys.ForecastDays);
        if(_days == 0)
        {
            _days = Constants.DefaultForecastDays;
        }
    }

    void OnCardClick()
    {
    }

    void OnSettingsClicked()
    {
        // Open the settings page.
        NavMan.NavigateTo("/forecast-settings");
    }
}
