@*
    Favourites card
*@
@using MudBlazor

@inject NavigationManager NavMan
@inject IDexieDAL _db
@inject NotificationService Notification
@inject ISettingsService _settings

<MudCard Class="@Class" @onclick="OnCardClick" Outlined="true" Style="background-color: transparent;">
    <MudCardHeader Style="@($"background: {Cashier.Lib.Palette.Primary};")" Class="px-2 pt-2 pb-1">
        <CardHeaderAvatar>
            <MudIcon Icon="@IconsMud.Star" Size="Size.Medium" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText>Financial Forecast</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (accounts == null || accounts.Count == 0)
        {
            <MudText>There are no accounts selected for forecasting</MudText>
        }
        else
        {
            <ul>
                <li>
                    take the current value of an account: @@AccountName,
                    @@Account?.AccountBalance?.Quantity @@Account?.AccountBalance?.Currency
                </li>
                <li>
                    add any local transactions
                </li>
                <li>
                    project the scheduled transactions related to the account
                </li>
                <li>
                    show a line chart with the balance
                </li>
            </ul>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string? Class { get; set; }

    List<Account> accounts = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();

        // todo: Add local transactions
        // todo: project scheduled transactions
        // todo: draw a chart

    }

    async Task LoadData()
    {
        var accountName = "Cash";

        try
        {
            var currency = await _settings.GetDefaultCurrency();

            var calc = new ForecastCalculator(_db);
            var account = await calc.GetAccountBalance(accountName, currency);
        }
        catch (Exception e)
        {
            Notification.Error(e.Message);
        }
    }

    void OnCardClick()
    {
        // Open the settings page.
        NavMan.NavigateTo("/forecast-settings");
    }
}
